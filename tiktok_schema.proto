syntax = "proto3";
package TikTok;

/**

This Proto-Schema has been created based on the current C#-Classes in TikTokLiveSharp.

These objects are reverse-engineered from a partial data-set and are not fully understood: 
- Some of the values are simply called Data{X} as their function is unknown.
- There are some Timestamps labeled Timestamp{X} as it's unsure which time-value they reflect. 
    These are all UNIX-timestamps close to present time.
- For some of (int-)value a relevant size has been picked based on read values
    Some of the uint32-values could potentially be interpreted as boolean types or enums

If you have any data to add or contexts/names you can fill
please add an issue to the Github: https://github.com/frankvHoof93/TikTokLiveSharp

*/

/**

-=-=-=-=-=-=-=-=-=-=-=
     NEW MESSAGES     
-=-=-=-=-=-=-=-=-=-=-=

*/


/**

-=-=-=-=-=-=-=-=-=-=-=
       GENERIC        
-=-=-=-=-=-=-=-=-=-=-=

*/

message Generic
{
  enum AGType
  {
    AGType_Unknown = 0;
    AG_Enable = 1;
    AG_Disable = 2;
  }
  
  message DataPolicyStruct {
    AGType AG = 1;
  }
  
  message DynamicMessage {
    string Key = 1;
    string Type = 2;
    string KeyField = 3;
    string TypeField = 4;
    string Psm = 5;
    string Handler = 6;
    string ContentEncoding = 7;
    string Serializer = 8;
  }
  
  message EmptyRequest {
  }
  
  message EmptyResponse {
  }
  
  message PushFrame {
    uint64 SeqId = 1;
    uint64 LogId = 2;
    uint64 Service = 3;
    uint64 Method = 4;
    repeated PushHeader HeadersList = 5;
    string PayloadEncoding = 6;
    string PayloadType = 7;
    bytes Payload = 8;
  }
  
  message PushHeader {
    string Key = 1;
    string Value = 2;
  }
  
  message WebsocketAck {
    uint64 Id = 1;
    string Type = 2;
  }
}


/**

-=-=-=-=-=-=-=-=-=-=-=
         Data         
-=-=-=-=-=-=-=-=-=-=-=

*/

message Data
{

/**
----------------------
        Enums         
----------------------
*/

  enum AuditStatus
  {
    AuditStatusUnknown = 0;
    AuditStatusPass = 1;
    AuditStatusFailed = 2;
    AuditStatusReviewing = 3;
    AuditStatusForbidden = 4;
  }
  
  enum BadgeDisplayType
  {
    BadgeDisplayType_Unknown = 0;
    BadgeDisplayType_Image = 1;
    BadgeDisplayType_Text = 2;
    BadgeDisplayType_String = 3;
    BadgeDisplayType_Combine = 4;
  }
  
  enum BadgeExhibitionType
  {
    BadgeExhibitionTypeBadge = 0;
    BadgeExhibitionTypeIdentityLabel = 1;
  }
  
  enum BadgePriorityType
  {
    BadgePriorityType_Unknown = 0;
    BadgePriorityType_StrongRelation = 10;
    BadgePriorityType_Platform = 20;
    BadgePriorityType_Relation = 30;
    BadgePriorityType_Activity = 40;
    BadgePriorityType_RankList = 50;
  }
  
  enum BadgeSceneType
  {
    BadgeSceneType_Unknown = 0;
    BadgeSceneType_Admin = 1;
    BadgeSceneType_FirstRecharge = 2;
    BadgeSceneType_Friends = 3;
    BadgeSceneType_Subscriber = 4;
    BadgeSceneType_Activity = 5;
    BadgeSceneType_RankList = 6;
    BadgeSceneType_NewSubscriber = 7;
    BadgeSceneType_UserGrade = 8;
    BadgeSceneType_StateControlledMedia = 9;
    BadgeSceneType_Fans = 10;
    BadgeSceneType_LivePro = 11;
  }
  
  enum BadgeTextPosition
  {
    BadgeTextPositionUnknown = 0;
    BadgeTextPositionRight = 1;
    BadgeTextPositionBelow = 2;
  }
  
  enum BadgeType
  {
    BadgeTypeNormal = 0;
    BadgeTypeEmoji = 1;
    BadgeTypePlatformIcon = 2;
  }
  
  enum BenefitType
  {
    BenefitTypeUnknown = 0;
    BenefitTypeEmote = 1;
    BenefitTypeBadge = 2;
    BenefitTypeChat = 3;
    BenefitTypeGift = 4;
  }
  
  enum BenefitViewType
  {
    Benefit_View_Type_Unknown = 0;
    Benefit_View_Type_Emote = 1;
    Benefit_View_Type_Badge = 2;
    Benefit_View_Type_Chat = 3;
    Benefit_View_Type_Gift = 4;
    Benefit_View_Type_Customized_Perks = 5;
    Benefit_View_Type_Limited_Content = 6;
    Benefit_View_Type_Discord = 7;
    Benefit_View_Type_Sub_Only_Video = 8;
  }
  
  enum CohostABTestType
  {
    Cohost_AB_Test_Type_Unknown = 0;
    Cohost_AB_Test_Type_Link_Timeout_Strategy = 1;
  }
  
  enum CoHostPermissionType
  {
    No_Perm = 0;
    CoHost_Perm = 1;
    MultiHost_Perm = 2;
  }
  
  enum CommunityContentType
  {
    CommunityContentTypeUnknown = 0;
    CommunityContentTypeText = 1;
    CommunityContentTypeImage = 2;
  }
  
  enum ContentSource
  {
    ContentSourceUnknown = 0;
    ContentSourceNormal = 1;
    ContentSourceCamera = 2;
  }
  
  enum CycleType
  {
    CycleTypeUnknown = 0;
    CycleTypeFixedTime = 1;
    CycleTypePermanent = 2;
  }
  
  enum DetailBlockReason
  {
    BlockReasonNone = 0;
    InLinkMic = 100;
    MultiHostFull = 101;
    InCohostLinkMic = 102;
    DealOtherInvite = 103;
    DealOtherApply = 104;
    InPkStatus = 105;
    SelfInPkStatus = 106;
    InCohostInviteApply = 107;
    InAudienceLinkMic = 108;
    WaitingAutoMatch = 109;
    InviteNeedToJoin = 110;
    JoinNeedToInvite = 111;
    NoLinkMicPermission = 200;
    AnchorLinkMicSettingClosed = 202;
    AnchorLinkMicRefuseNotFollower = 203;
    AnchorLinkMicBlockInvitationOfLive = 204;
    AnchorLinkMicRefuseFriendInvite = 205;
    AnchorLinkMicRefuseFriendApply = 206;
    AnchorLinkMicRefuseNotFriendInvite = 207;
    AnchorLinkMicRefuseNotFriendApply = 208;
    AnchorLinkMicBlockInvitationOfMultiHost = 209;
    AnchorLinkMicBlockApplyOfMultiHost = 210;
    RoomPaused = 300;
    LiveTypeAudio = 301;
    RoomInteractionConflict = 302;
    RivalVersionNotSupport = 303;
    SelfVersionNotSupport = 304;
    MatureThemeMismatch = 305;
    SelfInOfficialChannel = 306;
    RivalInOfficialChannel = 307;
    InOfficialBackupChannel = 308;
    RivalReserveFull = 309;
    AnchorNotLiving = 310;
    AnchorIsSelf = 311;
    PrivateRoom = 312;
    BlockedByRival = 313;
    SelfBlockedRival = 314;
    ViewerRegionNotSupport = 315;
    SubscriberRoom = 316;
    RegionalBlock = 317;
    NetworkError = 400;
    RoomFilterError = 401;
  }
  
  enum DiscordExpiredSubscriberActionType
  {
    DiscordExpiredSubscriberActionTypeNoAction = 0;
    DiscordExpiredSubscriberActionTypeRemoveRole7Days = 1;
    DiscordExpiredSubscriberActionTypeRemoveRole24Hours = 2;
    DiscordExpiredSubscriberActionTypeKickRole7Days = 3;
    DiscordExpiredSubscriberActionTypeKickRole24Hours = 4;
  }
  
  enum DisplayStatus
  {
    DisplayStatusNormal = 0;
    DisplayStatusShadow = 1;
  }
  
  enum DisplayStrategy
  {
    DisplayStrategyUnknown = 0;
    DisplayStrategyHidden = 1;
  }
  
  enum EmotePrivateType
  {
    Emote_Private_Type_Normal = 0;
    Emote_Private_Type_Sub_Wave = 1;
  }
  
  enum EmotesShowStyle
  {
    EmotesShowStyleNormal = 0;
    EmotesShowStyleWithSticker = 1;
    EmotesShowStyleWithStickerNoPreview = 2;
  }
  
  enum EmoteType
  {
    EmoteTypeNormal = 0;
    EmoteTypeWithSticker = 1;
  }
  
  enum EnlargeScreenScene
  {
    Enlarge_Unkown = 0;
    Enlarge_Host_Screen = 1;
    Invite_Enlarge_Guest_Screen = 2;
    Cancel_Enlarge_For_Host = 3;
    Cancel_Enlarge_For_Guest = 4;
    Host_Receive_Cancel_Enlarge = 5;
    Get_Enlarge_Status = 6;
  }
  
  enum EntranceGroupType
  {
    Entrance_Group_Type_Default = 0;
    Entrance_Group_Type_Gift = 1;
    Entrance_Group_Type_E_Commerce = 2;
    Entrance_Group_Type_Game = 3;
  }
  
  enum EnvelopeBusinessType
  {
    BusinessTypeUnknown = 0;
    BusinessTypeUserDiamond = 1;
    BusinessTypePlatformDiamond = 2;
    BusinessTypePlatformShell = 3;
    BusinessTypePortal = 4;
    BusinessTypePlatformMerch = 5;
    BusinessTypeEoYDiamond = 6;
    BusinessTypeFanClubGtM = 7;
  }
  
  enum EnvelopeDisplay
  {
    EnvelopeDisplayUnknown = 0;
    EnvelopeDisplayNew = 1;
    EnvelopeDisplayHide = 2;
  }
  
  enum EnvelopeFollowShowStatus
  {
    EnvelopeFollowShowUnknown = 0;
    EnvelopeFollowShow = 1;
    EnvelopeFollowNotShow = 2;
  }
  
  enum GetSource
  {
    GetSourceUnknown = 0;
    GetSourceGoLivePage = 1;
  }
  
  enum GiftIMPriorityType
  {
    System = 0;
    Self_Sent = 1;
    Valuable_Gift = 2;
    Common_Gift = 3;
  }
  
  enum GiftShowType
  {
    GiftShowDefault = 0;
    GiftShowName = 1;
  }
  
  enum GiftTypeServer
  {
    UnknownGiftType = 0;
    SmallGiftType = 1;
    BigGiftType = 2;
    LuckyMoneyGiftType = 3;
    FaceRecognitionGiftType = 4;
  }
  
  enum GiftVerticalScenario
  {
    UnknownGiftVerticalScenario = 0;
    LokiGift = 1;
    LynxGift = 2;
    GiftBox = 3;
    RandomTravelGift = 4;
    ColorGift = 5;
    InGiftBoxGift = 6;
  }
  
  enum GoalAutoCreate
  {
    GoalAutoCreateUnknown = 0;
    GoalAutoCreateOn = 1;
    GoalAutoCreateOff = 2;
  }
  
  enum GoalSchemaScene
  {
    GoalSchemaUnknown = 0;
    GoalSchemaShowEdit = 1;
    GoalSchemaShowDetail = 2;
    GoalSchemaShowManage = 3;
  }
  
  enum GoalStatus
  {
    GoalStatusUnknown = 0;
    GoalStatusNotStart = 1;
    GoalStatusOngoing = 2;
    GoalStatusFinished = 3;
    GoalStatusDeleted = 4;
  }
  
  enum GoalType
  {
    GoalTypeUnknown = 0;
    GoalTypeStream = 1;
    GoalTypeSubscription = 2;
  }
  
  enum GuestMicCameraChangeScene
  {
    Change_Scene_Unknown = 0;
    Live_Show_By_Anchor_Auto = 1;
    Live_Show_By_Server_Normal = 2;
    Live_Show_By_Show_End = 3;
  }
  
  enum GuestMicCameraManageOp
  {
    Open_Mic = 0;
    Open_Camera = 1;
    Close_Mic = 2;
    Close_Camera = 3;
    Close_Mic_Punish = 4;
  }
  
  enum HashtagNamespace
  {
    Global = 0;
    Gaming = 1;
  }
  
  enum HorizontalPaddingRule
  {
    HorizontalPaddingRuleUseMiddleAndWidth = 0;
    HorizontalPaddingRuleUseLeftAndMiddleAndRight = 1;
  }
  
  enum IndicatorOp
  {
    IndicatorOpUnknown = 0;
    IndicatorOpAdd = 1;
    IndicatorOpRemove = 2;
    IndicatorOpUpdate = 3;
    IndicatorOpPin = 4;
    IndicatorOpUnpin = 5;
  }
  
  enum LastLayoutSettingScene
  {
    Max_Mic_Num_Setting_Scene_Unknown = 0;
    Max_Mic_Num_Setting_Scene_Fixed_Flow_Layout = 1;
    Max_Mic_Num_Setting_Scene_Fixed_Grid_Layout = 2;
  }
  
  enum LinkListStatus
  {
    Status_Unknown = 0;
    Status_Waiting = 1;
    Status_Linked = 2;
    Status_Finished = 3;
    Status_Waiting_Or_Linked = 4;
  }
  
  enum LinkmicApplierSortSetting
  {
    Linkmic_Applier_Sort_Setting_None = 0;
    Linkmic_Applier_Sort_Setting_By_Gift_Score = 1;
  }
  
  enum LinkmicAudiencePermissionAsViewer
  {
    Linkmic_Audience_Permission_As_Viewer_None = 0;
    Linkmic_Audience_Permission_As_Viewer_Ok = 1;
    Linkmic_Audience_Permission_As_Viewer_Not_Ok = 2;
  }
  
  enum LinkmicAudienceReplyType
  {
    Linkmic_Audience_RT_Unknown = 0;
    Linkmic_Audience_RT_Agree = 1;
    Linkmic_Audience_RT_Reject = 2;
  }
  
  enum LinkmicAudienceSharedInvitationType
  {
    Linkmic_Audience_Shared_Invitation_Type_None = 0;
    Linkmic_Audience_Shared_Invitation_Type_Normal_Live = 1;
    Linkmic_Audience_Shared_Invitation_Type_Link = 2;
  }
  
  enum LinkmicAudienceStatus
  {
    Audience_Status_Unknown = 0;
    Waiting = 1;
    Linked = 2;
    Finished = 3;
    Waiting_And_Linked = 4;
  }
  
  enum LinkmicAudienceType
  {
    Audience_Type_Unknown = 0;
    Video = 1;
    Audio = 2;
  }
  
  enum LinkmicAudienceUserReturnType
  {
    Linkmic_Audience_User_Return_Type_None = 0;
    Linkmic_Audience_User_Return_Type_Private_Msg = 1;
    Linkmic_Audience_User_Return_Type_Deeplink = 2;
  }
  
  enum LinkmicCheckPermissionOption
  {
    Linkmic_Check_Permission_Option_Unknown = 0;
    Linkmic_Check_Permission_Option_Check_Ban_Info = 1;
  }
  
  enum LinkmicCheckPermissionScene
  {
    Unknown_Scene = 0;
    List_By_Type = 1;
    Before_Apply = 2;
    Before_Reply = 3;
    Show_Audience_Info = 4;
    Host_Live_Start = 5;
    Host_One_Click_Live_Start = 6;
  }
  
  enum LinkmicGiftExpressionStrategy
  {
    ControlV1 = 0;
    ExperimentV1 = 1;
    ExperimentV2 = 2;
  }
  
  enum LinkmicLayout
  {
    Layout_Unknown = 0;
    Big = 1;
    Small = 8;
    Big_Party = 16;
  }
  
  enum LinkmicMultiLiveEnum
  {
    Default = 0;
    Anchor_Use_New_Layout = 1;
  }
  
  enum LinkmicPermitStatus
  {
    Linkmic_Permit_Status_None = 0;
    Linkmic_Permit_Status_Agree = 1;
    Linkmic_Permit_Status_Reject = 2;
  }
  
  enum LinkmicPlayType
  {
    PlayType_Invite = 0;
    PlayType_Apply = 1;
    PlayType_Reserve = 2;
  }
  
  enum LinkmicReplyType
  {
    RT_Unknown = 0;
    RT_Agree = 1;
    RT_Reject = 2;
  }
  
  enum LinkmicRoleType
  {
    Role_Type_Unknown = 0;
    Leader = 1;
    Player = 2;
    Invitee = 3;
  }
  
  enum LinkmicRtcExtInfoKey
  {
    LinkMic_Rtc_Ext_Info_Key_Default = 0;
    LinkMic_Rtc_Ext_Info_Key_Anchor_Float = 1;
    LinkMic_Rtc_Ext_Info_Key_Anchor_Float_Fix = 2;
    LinkMic_Rtc_Ext_Info_Key_Anchor_Grid_2 = 3;
    LinkMic_Rtc_Ext_Info_Key_Anchor_Grid_3 = 4;
    LinkMic_Rtc_Ext_Info_Key_Anchor_Grid_4 = 5;
    LinkMic_Rtc_Ext_Info_Key_Guest_Float = 101;
    LinkMic_Rtc_Ext_Info_Key_Guest_Float_Fix = 102;
    LinkMic_Rtc_Ext_Info_Key_Guest_Grid_2 = 103;
    LinkMic_Rtc_Ext_Info_Key_Guest_Grid_3 = 104;
    LinkMic_Rtc_Ext_Info_Key_Guest_Grid_4 = 105;
  }
  
  enum LinkmicSilenceStatus
  {
    Unsilence = 0;
    Silence_By_Self = 1;
    Silence_By_Owner = 2;
  }
  
  enum LinkmicStatus
  {
    Disable = 0;
    Enable = 1;
    Just_Following = 2;
    Multi_Linking = 3;
    Multi_Linking_Only_Following = 4;
  }
  
  enum LinkmicSwitchStatus
  {
    Off = 0;
    On = 1;
  }
  
  enum LinkmicSwitchType
  {
    AudioStream = 0;
    VideoStream = 1;
  }
  
  enum LinkmicUserSettingFlowDistribute
  {
    Linkmic_User_Setting_Flow_Distribute_Un_Set = 0;
    Linkmic_User_Setting_Flow_Distribute_Open = 1;
    Linkmic_User_Setting_Flow_Distribute_Close = 2;
  }
  
  enum LinkmicUserSettingGuestCameraStatus
  {
    Linkmic_User_Setting_Guest_Camera_Status_Un_Set = 0;
    Linkmic_User_Setting_Guest_Camera_Status_Open = 1;
    Linkmic_User_Setting_Guest_Camera_Status_Close = 2;
  }
  
  enum LinkmicUserSettingGuestRankListShowAction
  {
    Linkmic_User_Setting_Guest_Rank_List_Show_Un_Set = 0;
    Linkmic_User_Setting_Guest_Rank_List_Show_Open = 1;
    Linkmic_User_Setting_Guest_Rank_List_Show_Close = 2;
  }
  
  enum LinkmicUserSettingLayout
  {
    Linkmic_User_Setting_Layout_Grid = 0;
    Linkmic_User_Setting_Layout_Floating = 1;
  }
  
  enum LinkmicUserSettingShowAction
  {
    Linkmic_User_Setting_Show_Action_Checked = 0;
    Linkmic_User_Setting_Show_Action_Not_Checked = 1;
    Linkmic_User_Setting_Show_Action_Hide = 2;
    Linkmic_User_Setting_Show_Action_Open = 3;
    Linkmic_User_Setting_Show_Action_Close = 4;
  }
  
  enum LinkmicUserStatus
  {
    UserStatus_None = 0;
    UserStatus_Linked = 1;
    UserStatus_Applying = 2;
    UserStatus_Inviting = 3;
  }
  
  enum LinkmicUserUpdateScene
  {
    Update_Default_Scene = 0;
    Update_Background_Scene = 1;
  }
  
  enum LinkmicVendor
  {
    LinkmicVendor_Unknown = 0;
    Agoro = 1;
    Zego = 2;
    Byte = 4;
    Twilio = 8;
  }
  
  enum LinkRoleType
  {
    Type_Role_Type_Unknown = 0;
    Type_Leader = 1;
    Type_Player = 2;
    Type_Invitee = 3;
    Type_Applier = 4;
  }
  
  enum LinkSilenceStatus
  {
    Status_Unsilence = 0;
    Status_Silence_By_Self = 1;
    Status_Silence_By_Owner = 2;
  }
  
  enum LinkType
  {
    Type_Unknown = 0;
    Type_Video = 1;
    Type_Audio = 2;
    Type_Virtual = 3;
  }
  
  enum MultiGuestDisplayID
  {
    Multi_Guest_Display_Id_None = 0;
    Multi_Guest_Display_Id_Full_Screen = 1;
    Multi_Guest_Display_Id_Fixed = 2;
    Multi_Guest_Display_Id_Float = 3;
  }
  
  enum MultiGuestHostDevMode
  {
    Multi_Guest_Host_Dev_Mode_None = 0;
    Multi_Guest_Host_Dev_Mode_Not_Finish = 1;
  }
  
  enum MuteStatus
  {
    Mute = 0;
    Unmute = 1;
  }
  
  enum NoteContentType
  {
    NoteContentTypeUnknown = 0;
    NoteContentTypeText = 1;
    NoteContentTypeImage = 2;
    NoteContentTypeImageCombined = 3;
  }
  
  enum OptPairStatus
  {
    Opt_Pair_Status_Unknown = 0;
    Opt_Pair_Status_Offline = 1;
    Opt_Pair_Status_Finished = 2;
  }
  
  enum PayChannel
  {
    PayChan_Unknown = 0;
    PayChan_Coins = 1;
    PayChan_IAPCash = 2;
    PayChan_WebApp = 3;
    PayChan_GiftSub = 4;
  }
  
  enum PayStatus
  {
    SubStatus_Unknown = 0;
    SubStatus_OneTime = 1;
    SubStatus_AutoDeduction = 2;
    SubStatus_AutoDeductionCanceled = 3;
    SubStatus_Revoke = 4;
  }
  
  enum PerceptionDialogIconType
  {
    IconTypeNone = 0;
    IconTypeWarning = 1;
    IconTypeLinkMic = 2;
    IconTypeGuestLinkMic = 3;
    IconTypeLive = 4;
    IconTypeTreasureBox = 5;
    IconTypeMute = 6;
    IconGamePadAccessRevoked = 7;
    IconTypeBanReportLiveSingleRoom = 8;
    IconTypeBanReportLiveAllRoom = 9;
    IconTypeBanReportLiveGreenScreen = 10;
    IconTypeGift = 11;
    IconTypeAppealSuccess = 12;
  }
  
  enum PinCardType
  {
    UnknownPinCardType = 0;
    CustomizedBenefitEnum = 1;
    SubGoalEnum = 2;
  }
  
  enum PinStatus
  {
    Pin_Status_Unknown = 0;
    Pin_Status_Active = 1;
    Pin_Status_Cooling_Down = 2;
    Pin_Status_Can_Pin = 3;
  }
  
  enum Position
  {
    PositionUnknown = 0;
    PositionLeft = 1;
    PositionRight = 2;
  }
  
  enum ProfitRankType
  {
    TypeHourlyRank = 0;
    TypeWeeklyRank = 1;
    TypeHourlyStarRank = 2;
    TypeWeeklyRisingRankActivity = 3;
    TypeWeeklyRisingRank = 4;
    TypeWeeklyRookie = 5;
    TypeECommerceWeekly = 6;
    TypeECommerceDaily = 7;
    TypeDailyRank = 8;
    TypeFirstGiftRank = 9;
    TypeGameRank = 10;
    TypeDailyGame = 11;
    TypeHallOfFameRank = 12;
    TypeRankLeague = 13;
    Profit_Rank_Type_Daily_Rookie = 14;
    TypeDailyGamePUBG = 20;
    TypeDailyGameMLBB = 21;
    TypeDailyGameFreeFire = 22;
  }
  
  enum PunishTypeId
  {
    PunishTypeIdUnkown = 0;
    PunishTypeIdBanGamePartnership = 25;
    PunishTypeIdRemoveGamePartnership = 26;
  }
  
  enum RankViewType
  {
    RankViewType_Unknown = 0;
    AudienceViewer = 1;
    AnchorViewer = 2;
  }
  
  enum RequestUserStatus
  {
    Request_UserStatus_Unknown = 0;
    Request_UserStatus_Unlinked = 1;
    Request_UserStatus_Waiting = 2;
    Request_UserStatus_Ready = 3;
    Request_UserStatus_Linked = 4;
  }
  
  enum ReserveReplyStatus
  {
    ReserveReplyStatusUnknown = 0;
    ReserveReplyStatusWaitForMe = 1;
  }
  
  enum SOVMaskInfoType
  {
    SOV_Mask_Info_Type_None = 0;
    SOV_Mask_Info_Type_Sensitive = 1;
    SOV_Mask_Info_Type_Violation = 2;
    SOV_Mask_Info_Type_Music_Copyright = 3;
    SOV_Mask_Info_Type_Unavailable = 4;
  }
  
  enum SpotlightReviewStatus
  {
    SpotlightReviewStatusUnknown = 0;
    SpotlightReviewStatusApproved = 1;
    SpotlightReviewStatusUnderReview = 2;
    SpotlightReviewStatusRejected = 3;
  }
  
  enum SubBenefitBlockStatus
  {
    SubBenefitBlockStatusUnblock = 0;
    SubBenefitBlockStatusByShark = 1;
  }
  
  enum SubBenefitConfigStatus
  {
    SubBenefitConfigStatusUnknown = 0;
    SubBenefitConfigStatusNoNeed = 1;
    SubBenefitConfigStatusNeed = 2;
    SubBenefitConfigStatusDone = 3;
  }
  
  enum SubBenefitEnableStatus
  {
    SubBenefitEnableStatusUnknown = 0;
    SubBenefitEnableStatusEnable = 1;
    SubBenefitEnableStatusPending = 2;
    SubBenefitEnableStatusDisable = 3;
    SubBenefitEnableStatusLackPermission = 10;
  }
  
  enum SubBenefitUserConfigStatus
  {
    SubBenefitUserConfigStatusUnknown = 0;
    SubBenefitUserConfigStatusNoNeed = 1;
    SubBenefitUserConfigStatusNeed = 2;
    SubBenefitUserConfigStatusDone = 3;
  }
  
  enum SubCustomizedBenefitType
  {
    SubCustomizedBenefitTypeUnknown = 0;
    SubCustomizedBenefitTypeText = 1;
    SubCustomizedBenefitTypeDiscord = 2;
  }
  
  enum SubGiftType
  {
    UnknownSubGiftType = 0;
    TrayDynamicGift = 1;
    AudioEffectGift = 2;
    Sub_Gift_Type_Banner_Fly_Gift = 3;
    Sub_Gift_Type_Animation_Fly_Gift = 4;
  }
  
  enum SubGoalType
  {
    SubGoalTypeUnknown = 0;
    SubGoalTypeGift = 1;
    SubGoalTypeSubscription = 2;
  }
  
  enum SubTaskStatus
  {
    SubTaskStatusUnknown = 0;
    SubTaskStatusNormal = 1;
    SubTaskStatusFirstOnboarding = 2;
    SubTaskStatusFinishedOnboarding = 3;
  }
  
  enum SubTimerStickerChangeType
  {
    TitleChange = 0;
    StatusChange = 1;
    PositionChange = 2;
    SubIncrease = 3;
    Align = 4;
  }
  
  enum SubUserTask
  {
    SubUserTaskUnknown = 0;
    SubUserTaskSendEmotes = 1;
    SubUserTaskLiveAppointment = 2;
    SubUserTaskSendSubGift = 3;
    SubUserTaskInteractionComments = 4;
    SubUserTaskRenewSubscription = 5;
    SubUserTaskSubInGracePeriod = 6;
    SubUserTaskJoinDiscord = 7;
    SubUserTaskPriceChange = 8;
  }
  
  enum TimerOpType
  {
    TimerOpTypeStart = 0;
    TimerOpTypePause = 1;
    TimerOpTypeResume = 2;
    TimerOpTypeCancel = 3;
  }
  
  enum TimerStatus
  {
    TimerStatusNotStarted = 0;
    TimerStatusRunning = 1;
    TimerStatusPaused = 2;
    TimerStatusCancelled = 3;
    TimerStatusFinished = 4;
  }
  
  enum UserOnlineStatus
  {
    User_Online_Status_Unknown = 0;
    User_Online_Status_Online = 1;
    User_Online_Status_Offline = 2;
  }
  
  enum UserRelationType
  {
    Relation_Unknown = 0;
    Relation_Friends = 1;
    Relation_FansClub = 2;
    Relation_Fans = 3;
  }
  
  enum VerticalPaddingRule
  {
    VerticalPaddingRuleUseDefault = 0;
    VerticalPaddingRulUseTopAndBottom = 1;
  }
  
  enum VIPBadgeType
  {
    VIPBadgeType_Unknown = 0;
    VIPDefault = 1;
    RankBigBadge = 2;
  }
  
  enum VIPPrivilegeDefinition
  {
    VIPPrivilegeDefinition_Unknown = 0;
    VideoBadge = 1;
    LiveBadge = 201;
    RoomNotify = 202;
    VIPSeat = 203;
    VIPRank = 204;
    ExclusiveVIPGift = 205;
    EnterEffect = 206;
    LiveCommentShading = 207;
    ExclusiveCustomerService = 208;
    AllRoomNotify = 209;
    PreventKickoff = 210;
  }
  
  enum VIPStatus
  {
    VIPStatus_Unknown = 0;
    Renewing = 1;
    RenewSuccess = 2;
    Protective = 3;
  }

/**
----------------------
       Objects        
----------------------
*/

  message AnchorInfo {
    int64 Level = 1;
  }
  
  message AnchorLinkmicUserSettings {
    bool IsTurnOn = 1;
    bool AcceptMultiLinkmic = 2;
    bool AcceptNotFollowerInvite = 3;
    bool AllowGiftToOtherAnchors = 4;
    bool BlockInvitationOfThisLive = 5;
    bool ReceiveFriendMultiHostInvites = 6;
    bool ReceiveFriendMultiHostApplication = 7;
    bool BlockThisMultiHostInvites = 8;
    bool BlockThisMultiHostApplication = 9;
    bool ReceiveNotFriendMultiHostInvites = 10;
    bool ReceiveNotFriendMultiHostApplication = 11;
    bool AllowLiveNoticeOfFriends = 12;
  }
  
  message ArrowConfig {
    Image Icon = 1;
  }
  
  message AssetStruct {
    string Name = 1;
    string ResourceUri = 2;
    int64 LegacyEffectId = 3;
    Image ResourceUrl = 4;
    string Describe = 5;
    int64 Id = 6;
    int32 ResourceType = 7;
    string Md5 = 8;
    int64 Size = 9;
    LokiContent LokiContent = 10;
    int32 DownloadType = 26;
    repeated string ModelRequirementsList = 27;
    Image ResourceBytevc1Url = 28;
    string Bytevc1Md5 = 29;
    repeated VideoResource VideoResourceList = 30;
    FaceRecognitionArchiveMeta FaceRecognitionArchiveMeta = 31;
    string LynxUrlSettingsKey = 32;
    int32 DowngradeResourceType = 33;
  }
  
  message AttrRequestParams {
    string AttrTypes = 1;
  }
  
  message AttrResponseParams {
    UserAttrResponse Data = 1;
    Extra ExtraData = 2;
    
    message Extra {
      
    }
  }
  
  message AttrUpdateRequestParams {
    int64 AttrType = 1;
    int64 Value = 2;
  }
  
  message AttrUpdateResponseParams {
  }
  
  message Badge {
    string BadgeAbbr = 1;
    string BadgeDesc = 2;
    string BadgeEmoji = 3;
    Image BadgeIcon = 4;
    BadgeType BadgeType = 5;
    int64 BadgeId = 6;
  }
  
  message BadgeConfig {
    BadgeLimit BadgeLmt = 1;
    repeated OriginBadgeInfo OriginBadgeImgList = 2;
  }
  
  message BadgeDetail {
    Badge Badge = 1;
    repeated BadgePreview PreviewList = 2;
    AuditStatus BadgeAbbrAuditStatus = 3;
    AuditStatus BadgeDescAuditStatus = 4;
    bool Exist = 5;
  }
  
  message BadgeLimit {
    int32 AbbrCharCntLmt = 1;
    int32 DescCharCntLmt = 2;
  }
  
  message BadgePreview {
    int32 SubLevel = 1;
    Image MixedImage = 2;
    BadgeStruct BadgeStruct = 3;
  }
  
  message BadgeStruct {
    BadgeDisplayType displayType = 1;
    BadgePriorityType priorityType = 2;
    BadgeSceneType sceneType = 3;
    BadgeTextPosition position = 4;
    DisplayStatus displayStatus = 5;
    int64 greyedByClient = 6;
    BadgeExhibitionType exhibitionType = 7;
    string openweburl = 10;
    bool display = 11;
    PrivilegeLogExtra privilegeLogExtra = 12;
    oneof DataCase {
      ImageBadge image = 20;
      TextBadge text = 21;
      StringBadge str = 22;
      CombineBadge combine = 23;
    }
  }
  
  message BadgeText {
    string Key = 1;
    string DefaultPattern = 2;
    repeated string PiecesList = 3;
  }
  
  message BaLeadsGenInfo {
    bool LeadsGenPermission = 1;
    string LeadsGenModel = 2;
  }
  
  message BattleUserSettings {
    bool IsTurnOn = 1;
    bool AcceptNotFollowerInvite = 2;
    bool AllowGiftToOtherAnchors = 3;
  }
  
  message BefViewRenderSize {
    int32 Width = 1;
    int32 Height = 2;
  }
  
  message BenefitView {
    BenefitType BenefitType = 1;
    Image BenefitImage = 2;
    string BenefitDescription = 3;
    string BackgroundColor = 4;
    Image NavIcon = 5;
  }
  
  message BorderInfo {
    Data.Image Icon = 1;
    int64 Level = 2;
    string Source = 3;
    Data.Image ProfileDecorationRibbon = 4;
    Data.PrivilegeLogExtra BorderPrivilegeLogExtra = 5;
    Data.PrivilegeLogExtra ProfilePrivilegeLogExtra = 6;
    string AvatarBackgroundColor = 7;
    string AvatarBackgroundBorderColor = 8;
  }
  
  message CohostABTest {
    CohostABTestType ABTestType = 1;
    int64 Group = 2;
  }
  
  message CohostABTestList {
    repeated CohostABTest ABTestList = 1;
  }
  
  message CohostABTestSetting {
    int64 Key = 1;
    CohostABTestList Value = 2;
  }
  
  message CohostListUser {
    int64 UserId = 1;
    string NickName = 2;
    Image AvatarThumb = 3;
    int64 LinkedTime = 4;
    LinkmicPlayType PlayType = 5;
    int64 RoomId = 6;
    LinkmicUserStatus LinkmicUserStatus = 7;
    int64 LinkRemainingTime = 8;
    CoHostPermissionType PermissionType = 9;
    string DisplayId = 10;
    int64 FollowStatus = 11;
    bool IsLowVersion = 12;
    int64 RivalUserId = 13;
    int64 RivalRoomId = 14;
    bool IsInitiator = 15;
    string LinkmicIdStr = 16;
    int64 BestTeammateUid = 17;
    bool HasTopicPerm = 18;
    int64 InnerChannelId = 19;
  }
  
  message CohostTopic {
    int64 Id = 1;
    string TitleKey = 2;
    string TitleText = 3;
    bool Liked = 21;
    int64 TotalHeat = 22;
    int64 TotalRivals = 23;
    repeated Image RivalsAvatarList = 24;
  }
  
  message CombineBadge {
    BadgeDisplayType DisplayType = 1;
    Image Icon = 2;
    BadgeText Text = 3;
    string Str = 4;
    repeated PaddingInfo Padding = 5;
    FontStyle FontStyle = 6;
    ProfileCardPanel ProfileCardPanel = 7;
    CombineBadgeBackground Background = 11;
    CombineBadgeBackground BackgroundDarkMode = 12;
    bool IconAutoMirrored = 13;
    bool BackgroundAutoMirrored = 14;
    int32 PublicScreenShowStyle = 15;
    int32 PersonalCardShowStyle = 16;
    int32 RanklistOnlineAudienceShowStyle = 17;
    int32 MultiGuestShowStyle = 18;
    ArrowConfig ArrowConfig = 19;
    repeated PaddingInfo PaddingNewFont = 20;
  }
  
  message CombineBadgeBackground {
    Image Image = 1;
    string BackgroundColorCode = 2;
    string BorderColorCode = 3;
  }
  
  message CommunityContent {
    CommunityContentType CommunityContentType = 1;
    string CommunityContentText = 2;
    Image CommunityContentImage = 3;
    int32 CommunityContentDisplayOrder = 4;
    string TitleTemplateId = 5;
  }
  
  message CommunityDetail {
    repeated CommunityContent CommunityContentList = 1;
    AuditStatus AuditStatus = 2;
  }
  
  message DiggIcon {
    int64 Id = 1;
    Image NormalIconUrl = 2;
  }
  
  message DiscordGuildInfo {
    string GuildIdStr = 1;
    string GuildName = 2;
    string GuildIcon = 3;
    string OwnerIdStr = 4;
    string ReconnectUrl = 5;
    repeated DiscordRoleInfo RolesList = 6;
    Image GuildIconImage = 7;
  }
  
  message DiscordRoleInfo {
    string RoleIdStr = 1;
    string RoleName = 2;
    string Permissions = 3;
    bool IsPositionAboveBot = 4;
    bool IsPermissionHigherBot = 5;
  }
  
  message DoodleTemplate {
    int64 TemplateId = 1;
    Image Image = 2;
  }
  
  message Emote {
    string EmoteId = 1;
    Image Image = 2;
    AuditStatus AuditStatus = 3;
    string Uuid = 4;
    EmoteType EmoteType = 5;
    ContentSource ContentSource = 6;
    EmotePrivateType EmotePrivateType = 7;
  }
  
  message EmoteConfig {
    int32 EmoteCntLmt = 1;
    repeated Emote DefaultEmoteList = 2;
  }
  
  message EmoteDetail {
    repeated Emote EmoteList = 1;
    bool Exist = 2;
    int64 EmoteVersion = 3;
  }
  
  message EventCard {
    LiveEventInfo Event = 1;
    int64 CardStartTime = 2;
    string CardIconUrl = 3;
  }
  
  message FaceRecognitionArchiveMeta {
    string Version = 1;
    repeated string RequirementList = 2;
    string ModelNames = 3;
    string SdkExtra = 4;
  }
  
  message FlyingMicResources {
    Image PathImage = 1;
    Image MicImage = 2;
  }
  
  message FontStyle {
    int32 FontSize = 1;
    int32 FontWidth = 2;
    string FontColor = 3;
    string BorderColor = 4;
  }
  
  message FreeCellData {
    int64 Deprecated1 = 1;
    int64 Deprecated2 = 2;
    int64 Deprecated3 = 3;
    int64 Deprecated4 = 4;
    int64 Deprecated5 = 5;
    int64 Deprecated6 = 6;
    bool Deprecated7 = 7;
    bool Deprecated8 = 8;
    User Deprecated9 = 9;
    int64 Deprecated10 = 10;
    int64 Deprecated11 = 11;
    int64 Deprecated12 = 12;
    int64 Deprecated13 = 13;
  }
  
  message FreeGift {
    int64 Deprecated1 = 1;
    int64 Deprecated2 = 2;
    string Deprecated3 = 3;
    int64 Deprecated4 = 4;
    int64 Deprecated5 = 5;
    int64 Deprecated6 = 6;
    int64 Deprecated7 = 7;
  }
  
  message GameGiftData {
    MonkeyData Deprecated1 = 1;
    
    message MonkeyData {
      uint32 Deprecated1 = 1;
      uint32 Deprecated2 = 2;
      uint32 Deprecated3 = 3;
      string Deprecated4 = 4;
      repeated Range Deprecated5List = 5;
      string Deprecated6 = 6;
      int32 Deprecated7 = 7;
      int32 Deprecated8 = 8;
      
      message Range {
        int32 Deprecated1 = 1;
        int32 Deprecated2 = 2;
        int32 Deprecated3 = 3;
      }
    }
  }
  
  message GameTag {
    int64 Id = 1;
    string ShowName = 2;
    string ShortName = 3;
    string FullName = 4;
    repeated int64 HashtagIdList = 5;
    repeated Hashtag HashtagList = 6;
    repeated GameTagCategory GameCategoryList = 7;
    int64 Landscape = 8;
    string PackageName = 9;
    string BundleId = 10;
    
    enum GameTagType {
      GameTagType_Unknown = 0;
      PCGame = 1;
      MobileGame = 2;
      ConsoleGame = 3;
    }
    
    message GameTagCategory {
      GameTagType GameType = 1;
      string Title = 2;
    }
  }
  
  message GiftBanner {
    Text DisplayText = 1;
    string DisplayTextBgColor = 2;
    Image BoxImg = 3;
    Image BgImg = 4;
    string SchemeUrl = 5;
    bool Animate = 6;
    int64 Deprecated1 = 7;
    int64 Deprecated2 = 8;
  }
  
  message GiftBoxInfo {
    int64 Capacity = 1;
    bool IsPrimaryBox = 2;
    string SchemeUrl = 3;
    repeated GiftInfoInBox GiftInfosInBoxList = 4;
  }
  
  message GiftColorInfo {
    int64 ColorId = 1;
    string ColorName = 2;
    repeated string ColorValuesList = 3;
    Image ColorImage = 4;
    Image GiftImage = 5;
    int64 ColorEffectId = 6;
    bool IsDefault = 7;
  }
  
  message GiftIMPriority {
    repeated int64 QueueSizesList = 1;
    int64 SelfQueuePriority = 2;
    int64 Priority = 3;
  }
  
  message GiftInCart {
    int64 GiftId = 1;
    int64 ColorId = 2;
  }
  
  message GiftInfoInBox {
    int64 GiftId = 1;
    int64 EffectId = 2;
    int64 ColorId = 3;
    int32 RemainTimes = 4;
  }
  
  message GiftLockInfo {
    bool Lock = 1;
    int32 LockType = 2;
    int32 GiftLevel = 3;
  }
  
  message GiftPanelOperation {
    Image LeftImage = 1;
    Image RightImage = 2;
    string Title = 3;
    string TitleColor = 4;
    int64 TitleSize = 5;
    string SchemeUrl = 6;
    string EventName = 7;
  }
  
  message GiftsInBox {
    repeated GiftInfoInBox GiftsInfoInBoxList = 1;
  }
  
  message GiftStruct {
    Image image = 1;
    string describe = 2;
    int64 duration = 4;
    int64 id = 5;
    bool forLinkmic = 7;
    bool combo = 10;
    int32 type = 11;
    int32 diamondCount = 12;
    bool isDisplayedOnPanel = 13;
    int64 primaryEffectId = 14;
    Image giftLabelIcon = 15;
    string name = 16;
    Image icon = 21;
    string goldEffect = 24;
    Image previewImage = 47;
    GiftPanelBanner giftPanelBanner = 48;
    bool isBroadcastGift = 49;
    bool isEffectBefview = 50;
    bool isRandomGift = 51;
    bool isBoxGift = 52;
    bool canPutInGiftBox = 53;
    GiftBoxInfo giftBoxInfo = 54;
    map<string, string> TrackerParamsMap = 100;
    GiftLockInfo LockInfo = 101;
    repeated GiftColorInfo ColorInfosList = 102;
    string GiftRankRecommendInfo = 103;
    GiftRandomEffectInfo RandomEffectInfo = 104;
    int32 GiftSubType = 105;
    repeated int32 GiftVerticalScenariosList = 106;
    
    message GiftPanelBanner {
      Text DisplayText = 1;
      Image LeftIcon = 2;
      string SchemaUrl = 3;
      string Deprecated = 4;
      repeated string BgColorValuesList = 5;
      string BannerLynxUrl = 6;
    }
    
    message RandomGiftPanelBanner {
      Image BgImage = 1;
      Image ShadingImage = 2;
      int64 TargetNum = 3;
      int64 CollectNum = 4;
      string DisplayText = 5;
      Image LeftIcon = 6;
      string SchemaUrl = 7;
      repeated string BgColorValuesList = 8;
      int64 Round = 9;
    }
    
    message RandomGiftBubble {
     string DisplayText = 1;
     Image IconDynamicEffect = 2;
    }
    
    message GiftRandomEffectInfo {
     RandomGiftPanelBanner RandomGiftPanelBanner = 1;
     repeated int64 EffectIdsList = 2;
     string HostKey = 3;
     string AudienceKey = 4;
     RandomGiftBubble RandomGiftBubble = 5;
   }
  }
  
  message GiftSubGoal {
    string Name = 1;
    Image Icon = 2;
    int64 DiamondCount = 3;
    int32 Type = 4;
  }
  
  message GiftTrayInfo {
    Image TrayDynamicImg = 1;
    bool CanMirror = 2;
  }
  
  message Goal {
    int64 Id = 1;
    GoalType Type = 2;
    GoalStatus Status = 3;
    repeated SubGoal SubGoalsList = 4;
    string Description = 5;
    int32 AuditStatus = 6;
    CycleType CycleType = 7;
    int64 StartTime = 8;
    int64 ExpireTime = 9;
    int64 RealFinishTime = 10;
    repeated GoalContributor ContributorsList = 11;
    int32 ContributorsLength = 12;
    string IdStr = 13;
    string AuditDescription = 14;
    GoalStats Stats = 15;
  }
  
  message GoalComparison {
    int64 CoinsIncr = 1;
    int64 ContributorIncr = 2;
  }
  
  message GoalContributor {
    int64 UserId = 1;
    Image Avatar = 2;
    string DisplayId = 3;
    int64 Score = 4;
    string UserIdStr = 5;
    bool InRoom = 6;
    bool IsFriend = 7;
    repeated BadgeStruct BadgeList = 8;
    bool FollowByOwner = 9;
    bool IsFistContribute = 10;
  }
  
  message GoalInfo {
    bool ShowEntrance = 1;
    string SetGoalNotice = 2;
    string ManageGoalUrl = 3;
    AuditStatus AuditStatus = 4;
    int64 Target = 5;
    int64 Progress = 6;
    GoalSchemaScene GoalSchemaScene = 8;
  }
  
  message GoalPinInfo {
    bool Pin = 1;
    bool Unpin = 2;
    int64 PinEndTime = 3;
  }
  
  message GoalStats {
    int64 TotalCoins = 1;
    int64 TotalContributor = 2;
    GoalComparison Comparison = 3;
  }
  
  message GraceInfo {
    bool IsInGracePeriod = 1;
    int64 GraceEndTime = 2;
  }
  
  message Hashtag {
    int64 Id = 1;
    string Title = 2;
    Image Image = 3;
    HashtagNamespace Namespace = 4;
  }
  
  message HourlyRankEntrance {
    bool ShowEntrance = 1;
    repeated HourlyRankSlidePage SlidesList = 2;
    int64 Countdown = 3;
    Text DefaultContent = 4;
    HourlyRankSprintPrompt SprintPrompt = 5;
    RankViewType RankType = 6;
    bool AnchorOnList = 7;
    int64 RollDuration = 8;
    bool BlockMessage = 9;
    bool ShowEntranceAnimation = 10;
  }
  
  message HourlyRankSlidePage {
    int64 Duration = 1;
    Text Content = 2;
    string BackgroundColor = 3;
    string SchemeLink = 4;
  }
  
  message HourlyRankSprintPrompt {
    int64 Countdown = 1;
    int64 Duration = 2;
    Text Content = 3;
    string BackgroundColor = 4;
    int64 GapScore = 5;
    int64 OwnerRank = 6;
  }
  
  message IconConfig {
    Image Icon = 1;
    CombineBadgeBackground Background = 2;
  }
  
  message Image {
    repeated string UrlList = 1;
    string Uri = 2;
    int64 Height = 3;
    int64 Width = 4;
    string AvgColor = 5;
    int32 ImageType = 6;
    string OpenWebUrl = 7;
    Content Content_Obj = 8;
    bool IsAnimated = 9;
    
    message Content {
      string Name = 1;
      string FontColor = 2;
      int64 Level = 3;
    }
  }
  
  message ImageBadge {
    BadgeDisplayType DisplayType = 1;
    Image Image = 2;
  }
  
  message Indicator {
    string Key = 1;
    IndicatorOp Op = 2;
  }
  
  message LastLayoutSetting {
    int64 Scene = 1;
    string LayoutId = 2;
  }
  
  message LevelBadge {
    Image OriginImg = 3;
    Image PreviewImg = 4;
  }
  
  message LikeEffect {
    int64 Version = 1;
    int64 EffectCnt = 2;
    int64 EffectIntervalMs = 3;
  }
  
  message LinkerInviteMessageExtra {
    int64 MatchType = 1;
    int64 InviteType = 2;
    int64 SubType = 3;
    string Theme = 4;
    int64 Duration = 5;
    int64 Layout = 6;
    string Tips = 7;
    InviterRivalExtra Extra = 8;
    repeated InviterRivalExtra OtherUsersList = 9;
    CohostTopic TopicInfo = 10;
    
    message InviterRivalExtra {
      int64 TextType = 1;
      string Text = 2;
      string Label = 3;
      int64 UserCount = 4;
      Image AvatarThumb = 5;
      string DisplayId = 6;
      AuthenticationInfo Authentication_Info = 7;
      string NickName = 8;
      int64 FollowStatus = 9;
      Hashtag Hashtag = 10;
      TopHostInfo TopHostInfo = 11;
      int64 UserId = 12;
      bool IsBestTeammate = 13;
      
      message AuthenticationInfo {
        string CustomVerify = 1;
        string EnterpriseVerifyReason = 2;
        Image AuthenticationBadge = 3;
      }
    }
  }
  
  message LinkmicAudienceEmoji {
    int64 EmojiId = 1;
    bool IsRandom = 2;
    Image EmojiImage = 3;
    Image EmojiDynamicImage = 4;
    string EmojiName = 5;
    int64 AnimationDurationMs = 6;
    int64 EmojiResultDurationMs = 7;
  }
  
  message LinkmicUserSettingInfo {
    int64 UserId = 1;
    LinkmicUserSettingLayout Layout = 2;
    int32 FixMicNum = 3; // TODO: Unknown Enum
    int32 AllowRequestFromUser = 4; // TODO: Unknown Enum
    int32 AllowRequestFromFollowerOnly = 5; // TODO: Unknown Enum
    LinkmicApplierSortSetting ApplierSortSetting = 7;
  }
  
  message ListUser {
    User User = 1;
    int64 LinkmicId = 2;
    string LinkmicIdStr = 3;
    LinkListStatus Status = 4;
    LinkType LinkType = 5;
    int32 UserPosition = 6;
    LinkSilenceStatus SilenceStatus = 7;
    int64 ModifyTime = 8;
    int64 LinkerId = 9;
    LinkRoleType RoleType = 10;
  }
  
  message LiveEventInfo {
    int64 EventId = 1;
    int64 StartTime = 2;
    int64 Duration = 3;
    string Title = 4;
    string Description = 5;
    bool HasSubscribed = 6;
    bool IsPaidEvent = 7;
    int64 TicketAmount = 8;
    EventPayMethod PayMethod = 9;
    map<string, WalletPackage> WalletPkgDictMap = 10;
    
    enum EventPayMethod
    {
      EventPayMethodInvalid = 0;
      EventPayMethodCoins = 1;
      EventPayMethodCash = 2;
    }
  }
  
  message LiveMessageID {
    string PrimaryId = 1;
    string MessageScene = 2;
  }
  
  message LiveMessageSEI {
    LiveMessageID UniqueId = 1;
    int64 Timestamp = 2;
  }
  
  message LokiContent {
    string GiftType = 1;
    int64 GiftDuration = 2;
    bool NeedScreenShot = 3;
    bool ShouldMultiFrame = 4;
    string ViewOverlay = 5;
    BefViewRenderSize BefViewRenderSize = 6;
    int32 BefViewRenderFps = 7;
    int32 BefViewFitMode = 8;
    string ModelNames = 9;
    repeated string RequirementsList = 10;
  }
  
  message LuckyMoneyGiftMeta {
    Image Deprecated1 = 1;
    string Deprecated2 = 2;
    int64 Deprecated3 = 3;
    int32 Deprecated4 = 4;
    Image Deprecated5 = 5;
  }
  
  message LynxGiftExtra {
    int64 Id = 1;
    int64 Code = 2;
    int64 Type = 3;
    repeated string ParamsList = 4;
    string Extra = 5;
  }
  
  message MatchInfo {
    int64 Critical = 1;
  }
  
  message MonkeyDataRedis {
    int64 Deprecated1 = 1;
    int64 Deprecated2 = 2;
    int64 Deprecated3 = 3;
    int64 Deprecated4 = 4;
    int64 Deprecated5 = 5;
    int64 Deprecated6 = 6;
    int64 Deprecated7 = 7;
    int64 Deprecated8 = 8;
    string Deprecated9 = 9;
  }
  
  message MonkeyGiftRankData {
    int64 Deprecated1 = 1;
    Rank Deprecated2 = 2;
    int32 Deprecated3 = 3;
    repeated Rank Deprecated4List = 4;
    Rank Deprecated5 = 5;
    bool Deprecated6 = 6;
    
    message Rank {
      User Deprecated1 = 1;
      bool Deprecated2 = 2;
      int64 Deprecated3 = 3;
      int32 Deprecated4 = 4;
      int32 Deprecated5 = 5;
      int32 Deprecated6 = 6;
      string Deprecated7 = 7;
      string Deprecated8 = 8;
      string Deprecated9 = 9;
      string SecAnchorId = 10;
    }
  }
  
  message MsgFilter {
    bool IsGifter = 1;
    bool IsSubscribedToAnchor = 2;
  }
  
  message NoteContent {
    NoteContentType NoteContentType = 1;
    string NoteContentText = 2;
    Image NoteContentImage = 3;
    int32 NoteContentDisplayOrder = 4;
    int64 NoteTimeMs = 5;
  }
  
  message NoteDetail {
    repeated NoteContent NoteContentList = 1;
    int64 NoteVersion = 2;
  }
  
  message NumberConfig {
    int64 Number = 1;
    FontStyle FontStyle = 2;
    CombineBadgeBackground Background = 3;
  }
  
  message OptPairInfo {
    int64 MappingId = 1;
    int64 ExpectedTimeSec = 2;
    OptPairStatus OptPairStatus = 3;
  }
  
  message OriginBadgeInfo {
    int32 DubLevel = 1;
    Image OriginImg = 2;
    string Description = 3;
  }
  
  message PaddingInfo {
    bool UseSpecific = 1;
    repeated int32 MiddlePadding = 2;
    int32 BadgeWidth = 3;
    int32 LeftPadding = 4;
    int32 RightPadding = 5;
    int32 IconTopPadding = 6;
    int32 IconBottomPadding = 7;
    HorizontalPaddingRule HorizontalPaddingRule = 8;
    VerticalPaddingRule VerticalPaddingRule = 9;
  }
  
  message PaidEvent {
    int64 EventId = 1;
    PaidType Paid_Type = 2;
    
    enum PaidType
    {
      Free = 0;
      Paid = 1;
    }
  }
  
  message PatternRef {
    string Key = 1;
    string DefaultPattern = 2;
  }
  
  message PerceptionDialogInfo {
    PerceptionDialogIconType IconType = 1;
    Text Title = 2;
    Text SubTitle = 3;
    Text AdviceActionText = 4;
    Text DefaultActionText = 5;
    string ViolationDetailUrl = 6;
    int32 Scene = 7;
    int64 TargetUserId = 8;
    int64 TargetRoomId = 9;
    int64 CountDownTime = 10;
    bool ShowFeedback = 11;
    repeated PerceptionFeedbackOption FeedbackOptionsList = 12;
    int64 PolicyTip = 13;
  }
  
  message PerceptionFeedbackOption {
    int64 Id = 1;
    string ContentKey = 2;
  }
  
  message Perk {
    string Title = 1;
  }
  
  message PriceChangeInfo {
    bool IsPriceChanged = 1;
    string NewPrice = 2;
    string OldPrice = 3;
    int64 NextBillingData = 4;
    int64 DaysLeftToAgreeChange = 6;
    bool IsFirstEntrance = 7;
    bool IsConsentRequired = 8;
    string ContractId = 9;
    string OrderId = 10;
    int64 NoConfirmCancelContractDate = 11;
  }
  
  message PriceTier {
    int64 PriceTierGrade = 1;
    string USDPrice = 2;
    string LocalPrice = 3;
    string PriceHint = 4;
    bool IsDefault = 5;
  }
  
  message PrivateEmoteDetail {
    repeated Emote EmoteList = 1;
  }
  
  message PrivilegeLogExtra {
    string DataVersion = 1;
    string PrivilegeId = 2;
    string PrivilegeVersion = 3;
    string PrivilegeOrderId = 4;
    string Level = 5;
  }
  
  message ProfileCardPanel {
    bool UseNewProfileCardStyle = 1;
    BadgeTextPosition BadgeTextPosition = 2;
    ProjectionConfig ProjectionConfig = 3;
    ProfileContent ProfileContent = 4;
    SeparatorConfig SeparatorConfig = 5;
  }
  
  message ProfileContent {
    bool UseContent = 1;
    repeated IconConfig IconList = 2;
    NumberConfig NumberConfig = 3;
  }
  
  message ProjectionConfig {
    bool UseProjection = 1;
    Image Icon = 2;
  }
  
  message PunishEventInfo {
    string PunishType = 1;
    string PunishReason = 2;
    string PunishId = 3;
    int64 ViolationUid = 4;
    PunishTypeId PunishTypeId = 5;
    int64 Duration = 6;
    string PunishPerceptionCode = 7;
  }
  
  message RankEntrance {
    RankViewType RankType = 1;
    int64 Countdown = 2;
    Text DefaultContent = 3;
    RollCfg RollConfig = 4;
    bool BlockMessage = 5;
    int64 OwnerRankIdx = 6;
    bool OwnerOnRank = 7;
    RankViewType RelatedTabRankType = 8;
    EntranceGroupType RequestFirstShowType = 9;
  }
  
  message RankSprintPrompt {
    int64 Countdown = 1;
    int64 Duration = 2;
    Text Content = 3;
    string BackgroundColor = 4;
    int64 GapScore = 5;
    int64 OwnerRankIdx = 6;
  }
  
  message RankTabInfo {
    RankViewType RankType = 1;
    string Title = 2;
    Text TitleText = 3;
    int64 ListLynxType = 4;
  }
  
  message RivalExtraInfo {
    string Text = 1;
    TextType Text_Type = 2;
    string Label = 3;
    AnchorLayer Anchor_Layer = 4;
    LinkerInfo Linker_Info = 5;
    AnchorLinkmicUserSettings LinkmicUserSettings = 6;
    BattleUserSettings BattleUserSettings = 7;
    InviteBlockReason Invite_BlockReason = 8;
    LinkmicPlayType ShowPlayType = 9;
    TopHostInfo TopHostInfo = 10;
    Tag Tag = 11;
    ReserveInfo Reserve_Info = 12;
    DetailBlockReason DetailBlockReason = 13;
    OptPairInfo OptPairInfo = 14;
    TagV2 TagV2 = 15;
    
    enum TextType
    {
      TextTypeUnknown = 0;
      CurRoomFanTicket = 1;
      TotalDiamondCount = 2;
      Distance = 3;
      DistanceCity = 4;
    }
    
    enum AnchorLayer
    {
      AnchorLayerUnknown = 0;
      AnchorLayerTop = 1;
      AnchorLayerSmall = 2;
    }
    
    enum InviteBlockReason
    {
      None = 0;
      IsLinking = 1;
      InvitationDenied = 2;
      PermissionDenied = 3;
      LowClientVersion = 4;
      RoomPaused = 5;
      LinkMicFull = 6;
      MatureThemeNotMatch = 7;
      ReserveFull = 8;
      RegionalBlock = 9;
    }
    
    message LinkerInfo {
      repeated UserInfo LinkedUsersList = 1;
      
      message UserInfo {
        int64 UserId = 1;
        string NickName = 2;
        Image AvatarThumb = 3;
      }
    }
    
    message ReserveInfo {
      int64 ReservationId = 1;
      ReserveReplyStatus ReplyStatus = 2;
      string BubbleTip = 3;
      int64 ResponseTime = 4;
      bool IsReservationSender = 5;
    }
  }
  
  message RollCfg {
    int64 Weight = 1;
    int64 Duration = 2;
  }
  
  message SeparatorConfig {
    string Color = 1;
  }
  
  message ShowInfo {
    int64 ShowStartTime = 1;
    int64 ShowEndTime = 2;
    repeated Data.User Anchors = 3;
    string ShowIntroduction = 4;
  }
  
  message SOVBriefInfo {
    Image Cover = 1;
    SOVMaskInfo MaskInfo = 2;
  }
  
  message SOVMaskInfo {
    SOVMaskInfoType Type = 1;
    string Title = 2;
  }
  
  message SpotlightInfo {
    repeated SpotlightItem ItemList = 1;
  }
  
  message SpotlightItem {
    int64 Id = 1;
    Image Image = 2;
    SpotlightReviewStatus ReviewStatus = 3;
    bool IsPinned = 4;
    int64 CreateTimeSecond = 5;
  }
  
  message StreamGoalRecExtra {
    string LeadText = 1;
  }
  
  message StringBadge {
    BadgeDisplayType DisplayType = 1;
    string Str = 2;
  }
  
  message SubAdminPermission {
    bool AllowPinPerk = 1;
  }
  
  message SubBenefit {
    BenefitType BenefitType = 1;
    Image BenefitImage = 2;
    string BenefitDescription = 3;
    string BackgroundColor = 4;
  }
  
  message SubCustomizedBenefit {
    string BenefitIdStr = 1;
    string OriginalBenefitIdStr = 2;
    string OriginalTemplateIdStr = 3;
    BenefitType BenefitType = 10;
    SubCustomizedBenefitMedia BenefitMedia = 11;
    AuditStatus AuditStatus = 20;
    SubBenefitConfigStatus ConfigStatus = 21;
    SubBenefitEnableStatus EnableStatus = 22;
    SubBenefitBlockStatus BlockStatus = 23;
    SubBenefitUserConfigStatus UserConfigStatus = 24;
  }
  
  message SubCustomizedBenefitEntrance {
    bool ShowEntrance = 1;
    AuditStatus LastAuditStatus = 2;
    int64 LastBenefitId = 3;
    int64 Figures = 4;
    repeated Perk EnabledPerksList = 5;
    int64 MaxPerksCnt = 6;
  }
  
  message SubCustomizedBenefitMedia {
    Image IconImg = 1;
    string Title = 2;
    string Content = 3;
    string Url = 4;
    string BackgroundColor = 5;
  }
  
  message SubGift {
    string SendSubGiftNotice = 1;
    string SendUrl = 2;
    int64 SubGiftNum = 3;
    bool ShowEntrance = 4;
  }
  
  message SubGoal {
    SubGoalType Type = 1;
    int64 Id = 2;
    int64 Progress = 3;
    int64 Target = 4;
    oneof ExtraCase {
      GiftSubGoal Gift = 5;
    }
    string IdStr = 6;
  }
  
  message SubGoalPinCard {
    int64 GoalId = 1;
    int64 TimeToLive = 2;
    SubPinCardText Desc = 3;
    int64 Target = 4;
    int64 Progress = 5;
  }
  
  message SubGoalRecommendInfo {
    SubGoalType Type = 1;
    repeated SubGoal ItemsList = 2;
    string Description = 3;
    oneof ExtraCase {
      SubscriptionGoalRecExtra SubscriptionRecExtra = 4;
      StreamGoalRecExtra StreamGoalRecExtra = 5;
    }
  }
  
  message SubInfo {
    string UserId = 1;
    string AnchorId = 2;
    int64 SubStartTime = 3;
    int64 SubEndTime = 4;
    int64 NextRenewTime = 5;
    int32 SubscribedMonth = 6;
    bool IsSubscribing = 7;
    SubLevel SubLevel = 8;
    Messages.SubscribingStatus Status = 9;
    bool SubInfoNotFound = 10;
    string SKUName = 11;
    PayChannel PayChannel = 12;
    GraceInfo GraceInfo = 13;
    SubStatisticsData StatisticsInfo = 14;
    int32 SubscribedDays = 15;
    PriceChangeInfo PriceChangeInfo = 16;
  }
  
  message SubIntroVideo {
    string ItemId = 1;
    Image Cover = 2;
    string PlayUrl = 3;
    int64 Duration = 4;
    User Creator = 5;
    string Description = 6;
  }
  
  message SubLevel {
    int32 Level = 1;
    string Desc = 2;
    int32 MonthLimit = 3;
    LevelBadge Badge = 4;
    BadgeStruct BadgeStruct = 5;
  }
  
  message SubOnlyVideosBriefInfo {
    string TotalCountStr = 1;
    int32 TotalCount = 2;
    repeated SOVBriefInfo SOVBriefInfoList = 3;
  }
  
  message SubPinCard {
    int64 TimeToLive = 1;
    Text Title = 2;
    Text Desc = 3;
    Image Image = 4;
    PinCardType Type = 5;
    int64 Id = 6;
    int64 TemplateId = 7;
    SubGoalPinCard GoalPinCard = 8;
    
    message Text {
      TextType Type = 1;
      string Content = 2;
      
      enum TextType
      {
        UnknownTextType = 0;
        OriginalText = 1;
        StarlingKey = 2;
      }
    }
  }
  
  message SubPinCardText {
    TextType Type = 1;
    string Content = 2;
    
    enum TextType
    {
      Text_Type_Unknown = 0;
      Text_Type_Original = 1;
      Text_Type_Starling_Key = 2;
    }
  }
  
  message SubRankTabInfo {
    RankViewType RankType = 1;
    Text TitleText = 2;
  }
  
  message SubscriptionGoalRecExtra {
    int32 SubscriptionCount = 1;
  }
  
  message SubscriptionInfo {
    Messages.SubscribingStatus CurrentStatus = 1;
  }
  
  message SubStatisticsData {
    int64 FirstSubStartTime = 1;
    int64 FirstSubEndTime = 2;
    int64 LastSubStartTime = 3;
    int64 LastSubEndTime = 4;
    int32 ActiveSubscribeDays = 5;
  }
  
  message SubTaskInfo {
    SubUserTask SubUserTask = 1;
  }
  
  message SubTimerSticker {
    SubTimerStickerChangeType Type = 1;
    int64 TimerId = 2;
    TimerOpType OpType = 3;
    TimerStatus TimerStatus = 4;
    string AnchorSideTitle = 5;
    string UserSideTitle = 6;
    int32 SubIncreaseCount = 7;
    int64 TimeIncreasePerSub = 8;
    int64 TimeIncrease = 9;
    int64 TotalTime = 10;
    int64 RemainingTime = 11;
    int64 Timestamp = 12;
    int64 StickerX = 13;
    int64 StickerY = 14;
    int64 ScreenW = 15;
    int64 ScreenH = 16;
  }
  
  message Tag {
    int32 TagType = 1;
    string TagValue = 2;
    string TagText = 3;
  }
  
  message TagV2 {
    TagClassification Tag_Classification = 1;
    int32 TagType = 2;
    string TagValue = 3;
    string StarlingKey = 4;
    oneof ContentCase {
      SecondDegreeRelationContent SecondDegree_RelationContent = 10;
      int64 CohostHistoryDay = 11;
    }
    
    enum TagClassification
    {
      TagClassification_Unknown = 0;
      CohostHistory = 1;
      FirstDegreeRelation = 2;
      SecondDegreeRelation = 3;
    }
    
    message SecondDegreeRelationContent {
      repeated UserInfo RelatedUsersList = 1;
      int64 TotalRelatedUserCnt = 2;
      
      message UserInfo {
        int64 UserId = 1;
        string NickName = 2;
        Image AvatarThumb = 3;
      }
    }
  }
  
  message TestDemo {
    string Value = 1;
  }
  
  message Text {
    string Key = 1;
    string DefaultPattern = 2;
    TextFormat DefaultFormat = 3;
    repeated TextPiece PiecesList = 4;
  }
  
  message TextBadge {
    BadgeDisplayType DisplayType = 1;
    string Key = 2;
    string DefaultPattern = 3;
    repeated string PiecesList = 4;
  }
  
  message TextFormat {
    string Color = 1;
    bool Bold = 2;
    bool Italic = 3;
    int32 Weight = 4;
    int32 ItalicAngle = 5;
    int32 FontSize = 6;
    bool UseHeighLightColor = 7;
    bool UseRemoteClor = 8;
  }
  
  message TextPiece {
    int32 Type = 1;
    TextFormat Format = 2;
    string StringValue = 11;
    TextPieceUser UserValue = 21;
    TextPieceGift GiftValue = 22;
    TextPieceHeart HeartValue = 23;
    TextPiecePatternRef PatternRefValue = 24;
    TextPieceImage ImageValue = 25;
  }
  
  message TextPieceGift {
    int64 GiftId = 1;
    PatternRef NameRef = 2;
    GiftShowType ShowType = 3;
    int64 ColorId = 4;
  }
  
  message TextPieceHeart {
    string Color = 1;
  }
  
  message TextPieceImage {
    Image Image = 1;
  }
  
  message TextPiecePatternRef {
    string Key = 1;
    string DefaultPattern = 2;
  }
  
  message TextPieceUser {
    User User = 1;
    bool WithColon = 2;
  }
  
  message TimerConfig {
    int32 MaxTitleLength = 1;
    int64 DefaultStartCountdownTimeS = 2;
    int64 MaxStartCountdownTimeS = 3;
    int64 DefaultTimeIncreasePerSubS = 4;
    int64 DefaultTimeIncreaseCapS = 5;
    int64 MaxTimeIncreaseCapS = 6;
    string BottomButtonText = 7;
  }
  
  message TimerDetail {
    int64 TimerId = 1;
    int64 AnchorId = 2;
    int64 StartTimestampS = 3;
    int64 StartCountdownTimeS = 4;
    string AnchorSideTitle = 5;
    string UserSideTitle = 6;
    int64 TimeIncreasePerSubS = 7;
    int64 TimeIncreaseCapS = 8;
    int32 SubCount = 9;
    bool TimeIncreaseReachCap = 10;
    int64 TotalPauseTimeS = 11;
    int64 LastPauseTimestampS = 12;
    int64 TotalTimeS = 13;
    int64 RemainingTimeS = 14;
    int64 TimestampS = 15;
    int64 StickerX = 16;
    int64 StickerY = 17;
    int64 ScreenW = 18;
    int64 ScreenH = 19;
    TimerStatus TimerStatus = 20;
    AntidirtStatus Antidirt_Status = 21;
    AuditStatus AuditStatus = 22;
    
    enum AntidirtStatus
    {
      Pass = 0;
      Failed = 1;
    }
  }
  
  message TopFrameSummary {
    int64 Id = 1;
    string Title = 2;
    string Schema = 3;
    repeated ShowInfo ShowList = 4;
  }
  
  message TopHostInfo {
    string RankType = 1;
    int64 TopIndex = 2;
  }
  
  message TopicSessionStatus {
    int64 SessionId = 1;
    int64 SessionHeat = 2;
  }
  
  message User {
    int64 Id = 1;
    int64 Deprecated1 = 2;
    string NickName = 3;
    int32 Deprecated2 = 4;
    string BioDescription = 5;
    int32 Deprecated3 = 6;
    int64 Deprecated4 = 7;
    string Deprecated5 = 8;
    Image AvatarThumb = 9;
    Image AvatarMedium = 10;
    Image AvatarLarge = 11;
    bool Verified = 12;
    int32 Deprecated6 = 13;
    string Deprecated7 = 14;
    int32 Status = 15;
    int64 CreateTime = 16;
    int64 ModifyTime = 17;
    int64 Secret = 18;
    string ShareQRCodeUri = 19;
    int32 Deprecated8 = 20;
    repeated Image BadgeImageList = 21;
    FollowInfo Follow_Info = 22;
    PayGrade Pay_Grade = 23;
    FansClub Fans_Club = 24;
    BorderInfo UserBorder = 25;
    string SpecialId = 26;
    Image AvatarBorder = 27;
    Image Medal = 28;
    repeated Image RealtimeIconsList = 29;
    repeated Image NewRealtimeIconsList = 30;
    int64 TopVipNo = 31;
    UserAttr User_Attr = 32;
    OwnRoom Own_Room = 33;
    int64 PayScore = 34;
    int64 TicketCount = 35;
    AnchorInfo Anchor_Info = 36;
    LinkmicStatus LinkmicStatus = 37;
    string DisplayId = 38;
    bool WithCommercePermission = 39;
    bool WithFusionShopEntry = 40;
    int64 Deprecated21 = 41;
    AnchorLevel WebcastAnchorLevel = 42;
    string VerifiedContent = 43;
    AuthorStats Author_Stats = 44;
    repeated User TopFansList = 45;
    string SecUid = 46;
    int32 UserRole = 47;
    DeprecatedType1 Deprecated9 = 48;
    ActivityInfo ActivityReward = 49;
    DeprecatedType4 Deprecated10 = 50;
    DeprecatedType5 Deprecated11 = 51;
    Image PersonalCard = 52;
    AuthenticationInfo Authentication_Info = 53;
    int32 Deprecated12 = 54;
    int32 Deprecated13 = 55;
    DeprecatedType6 Deprecated14 = 56;
    repeated Image MediaBadgeImageList = 57;
    int32 Deprecated15 = 58;
    UserVIPInfo UserVipInfo = 59;
    repeated int64 CommerceWebcastConfigIdsList = 60;
    repeated BorderInfo BorderList = 61;
    ComboBadgeInfo Combo_BadgeInfo = 62;
    SubscribeInfo Subscribe_Info = 63;
    repeated BadgeStruct BadgeList = 64;
    repeated int64 MintTypeLabelList = 65;
    FansClubInfo FansClub_Info = 66;
    bool Deprecated19 = 1001;
    bool AllowFindByContacts = 1002;
    bool AllowOthersDownloadVideo = 1003;
    bool AllowOthersDownloadWhenSharingVideo = 1004;
    bool AllowShareShowProfile = 1005;
    bool AllowShowInGossip = 1006;
    bool AllowShowMyAction = 1007;
    bool AllowStrangeComment = 1008;
    bool AllowUnfollowerComment = 1009;
    bool AllowUseLinkmic = 1010;
    AnchorLevel Anchor_Level = 1011;
    Image AvatarJpg = 1012;
    string BgImgUrl = 1013;
    string Deprecated18 = 1014;
    bool Deprecated16 = 1015;
    int32 BlockStatus = 1016;
    int32 CommentRestrict = 1017;
    string Constellation = 1018;
    int32 DisableIChat = 1019;
    int64 EnableIChatImg = 1020;
    int32 Exp = 1021;
    int64 FanTicketCount = 1022;
    bool FoldStrangerChat = 1023;
    int64 FollowStatus = 1024;
    bool Deprecated28 = 1025;
    string Deprecated29 = 1026;
    int32 IChatRestrictType = 1027;
    string IdStr = 1028;
    bool IsFollower = 1029;
    bool IsFollowing = 1030;
    bool NeedProfileGuide = 1031;
    int64 PayScores = 1032;
    bool PushCommentStatus = 1033;
    bool PushDigg = 1034;
    bool PushFollow = 1035;
    bool PushFriendAction = 1036;
    bool PushIChat = 1037;
    bool PushStatus = 1038;
    bool PushVideoPost = 1039;
    bool PushVideoRecommend = 1040;
    UserStats Stats = 1041;
    bool Deprecated17 = 1042;
    string VerifiedReason = 1043;
    bool WithCarManagementPermission = 1044;
    repeated LiveEventInfo UpcomingEventList = 1045;
    string ScmLabel = 1046;
    EcommerceEntrance Ecommerce_Entrance = 1048;
    bool IsBlock = 1049;
    
    message FollowInfo {
      int64 FollowingCount = 1;
      int64 FollowerCount = 2;
      int64 FollowStatus = 3;
      int64 PushStatus = 4;
    }
    
    message PayGrade {
      int64 Deprecated20 = 1;
      Image DiamondIcon = 2;
      string Name = 3;
      Image Icon = 4;
      string NextName = 5;
      int64 Level = 6;
      Image NextIcon = 7;
      int64 Deprecated22 = 8;
      int64 Deprecated23 = 9;
      int64 Deprecated24 = 10;
      int64 Deprecated25 = 11;
      int64 Deprecated26 = 12;
      string GradeDescribe = 13;
      repeated GradeIcon GradeIconList = 14;
      int64 ScreenChatType = 15;
      Image ImIcon = 16;
      Image ImIconWithLevel = 17;
      Image LiveIcon = 18;
      Image NewImIconWithLevel = 19;
      Image NewLiveIcon = 20;
      int64 UpgradeNeedConsume = 21;
      string NextPrivileges = 22;
      Image Background = 23;
      Image BackgroundBack = 24;
      int64 Score = 25;
      string GradeBanner = 1001;
      Image ProfileDialogBg = 1002;
      Image ProfileDialogBgBack = 1003;
      
      message GradeIcon {
        Image Icon = 1;
        int64 IconDiamond = 2;
        int64 Level = 3;
        string LevelStr = 4;
      }
    }
    
    message FansClub {
      FansClubData Data = 1;
      map<int32, FansClubData> PreferDataMap = 2;
      
      enum PreferentialType
      {
        PersonalProfile = 0;
        OtherRoom = 1;
      }
      
      message FansClubData {
        string ClubName = 1;
        int32 Level = 2;
        UserFansClubStatus FansClubStatus = 3;
        UserBadge Badge = 4;
        repeated int64 AvailableGiftIdsList = 5;
        int64 AnchorId = 6;
        
        enum BadgeIcon
        {
          BadgeIcon_Unknown = 0;
          Icon = 1;
          SmallIcon = 2;
        }
        
        enum UserFansClubStatus
        {
          NotJoined = 0;
          Active = 1;
          Inactive = 2;
        }
        
        message UserBadge {
          map<int32, Image> IconsMap = 1;
          string Title = 2;
        }
      }
    }
    
    message OwnRoom {
      repeated int64 RoomIdsList = 1;
      repeated string RoomIdsStrList = 2;
    }
    
    message AnchorLevel {
      int64 Level = 1;
      int64 Experience = 2;
      int64 LowestExperienceThisLevel = 3;
      int64 HighestExperienceThisLevel = 4;
      int64 TaskStartExperience = 5;
      int64 TaskStartTime = 6;
      int64 TaskDecreaseExperience = 7;
      int64 TaskTargetExperience = 8;
      int64 TaskEndTime = 9;
      Image ProfileDialogBg = 10;
      Image ProfileDialogBgBack = 11;
      Image StageLevel = 12;
      Image SmallIcon = 13;
    }
    
    message AuthorStats {
      int64 VideoTotalCount = 1;
      int64 VideoTotalPlayCount = 2;
      int64 VideoTotalShareCount = 3;
      int64 VideoTotalSeriesCount = 4;
      int64 VarietyShowPlayCount = 5;
      int64 VideoTotalFavoriteCount = 6;
    }
    
    message DeprecatedType1 {
      string Deprecated1 = 1;
      int64 Deprecated2 = 2;
      int64 Deprecated3 = 3;
      string Deprecated4 = 4;
      string Deprecated5 = 5;
      bool Deprecated6 = 6;
      DeprecatedType2 Deprecated7 = 7;
      
      message DeprecatedType2 {
        string Deprecated1 = 1;
        string Deprecated2 = 2;
        DeprecatedType3 Deprecated3 = 3;
        
        message DeprecatedType3 {
          string Deprecated1 = 1;
          string Deprecated2 = 2;
          string Deprecated3 = 3;
        }
      }
    }
    
    message ActivityInfo {
      Image Badge = 1;
      Image StoryTag = 2;
    }
    
    message DeprecatedType4 {
      Image Deprecated1 = 1;
      int64 Deprecated2 = 2;
      Image Deprecated3 = 3;
      string Deprecated4 = 4;
      int64 Deprecated5 = 5;
      Image Deprecated6 = 6;
      Image Deprecated7 = 7;
      Image Deprecated8 = 8;
      repeated string Deprecated9List = 9;
    }
    
    message DeprecatedType5 {
      string Deprecated1 = 1;
      int64 Deprecated2 = 2;
      Image Deprecated3 = 3;
      string Deprecated4 = 4;
    }
    
    message AuthenticationInfo {
      string CustomVerify = 1;
      string EnterpriseVerifyReason = 2;
      Image AuthenticationBadge = 3;
    }
    
    message DeprecatedType6 {
      bool Deprecated1 = 1;
      int64 Deprecated2 = 2;
      string Deprecated3 = 3;
      string Deprecated4 = 4;
    }
    
    message ComboBadgeInfo {
      Image Icon = 1;
      int64 ComboCount = 2;
    }
    
    message SubscribeBadge {
      Image OriginImg = 1;
      Image PreviewImg = 2;
    }
    
    message SubscribeInfo {
      bool Qualification = 1;
      bool IsSubscribe = 2;
      SubscribeBadge Badge = 3;
      bool EnableSubscription = 4;
      int64 SubscriberCount = 5;
      bool IsInGracePeriod = 6;
      bool IsSubscribedToAnchor = 7;
      TimerDetail TimerDetail = 8;
      bool UserGiftSubAuth = 10;
      bool AnchorGiftSubAuth = 11;
    }
    
    message FansClubInfo {
      bool IsSleeping = 1;
      int64 FansLevel = 2;
      int64 FansScore = 3;
      Image Badge = 4;
      int64 FansCount = 5;
    }
    
    message UserStats {
      int64 Id = 1;
      string IdStr = 2;
      int64 FollowingCount = 3;
      int64 FollowerCount = 4;
      int64 RecordCount = 5;
      int64 TotalDuration = 6;
      int64 DailyFanTicketCount = 7;
      int64 DailyIncome = 8;
      int64 ItemCount = 9;
      int64 FavoriteItemCount = 10;
      int64 Deprecated27 = 11;
      int64 DiamondConsumedCount = 12;
      int64 TuwenItemCount = 13;
    }
    
    message EcommerceEntrance {
      EntranceType Entrance_Type = 1;
      CreatorType Creator_Type = 2;
      string Schema = 3;
      ShopEntranceInfo ShopEntrance_Info = 4;
      ShowcaseEntranceInfo ShowcaseEntrance_Info = 5;
      
      enum EntranceType
      {
        Profile = 0;
        Showcase = 1;
        Shop = 2;
      }
      
      enum CreatorType
      {
        Undefined = 0;
        Official = 1;
        Market = 2;
        Normal = 3;
      }
      
      message ShopEntranceInfo {
        string ShopId = 1;
        string ShopName = 2;
        string ShopRating = 3;
        StoreLabel Store_Label = 4;
        string FormatSoldCount = 5;
        int64 SoldCount = 6;
        int32 ExpRatePercentile = 7;
        string ExpRateTopDisplay = 8;
        int32 RateDisplayStyle = 9;
        bool ShowRateNotApplicable = 10;
        
        message StoreLabel {
          StoreOfficialLabel OfficialLabel = 1;
          bool IsBytemall = 2;
          
          enum StoreBrandLabelType
          {
            None = 0;
            Official = 1;
            Authorized = 2;
            Store_Brand_Label_Type_Blue_V = 3;
            Store_Brand_Label_Type_Top_Choice = 4;
          }
          
          message StoreOfficialLabel {
            ShopLabelImage LabelImageLight = 1;
            ShopLabelImage LabelImageDark = 2;
            StoreBrandLabelType LabelType = 3;
            string LabelTypeStr = 4;
            
            message ShopLabelImage {
              int32 Height = 1;
              int32 Width = 2;
              string MineType = 3;
              string ThumbUri = 4;
              repeated string ThumbUriList = 5;
              string Uri = 6;
              repeated string UrlList = 7;
              string Color = 8;
            }
          }
        }
      }
      
      message ShowcaseEntranceInfo {
        string FormatSoldCount = 1;
        int64 SoldCount = 2;
      }
    }
  }
  
  message UserAttr {
    bool IsMuted = 1;
    bool IsAdmin = 2;
    bool IsSuperAdmin = 3;
    int64 MuteDuration = 4;
    map<int32, int32> AdminPermissionsMap = 5;
  }
  
  message UserAttrResponse {
    map<int64, int64> Values = 1;
  }
  
  message UserIdentity {
    bool IsGiftGiverOfAnchor = 1;
    bool IsSubscriberOfAnchor = 2;
    bool IsMutualFollowingWithAnchor = 3;
    bool IsFollowerOfAnchor = 4;
    bool IsModeratorOfAnchor = 5;
    bool IsAnchor = 6;
  }
  
  message UserVIPInfo {
    int64 VipLevel = 1;
    string VipLevelName = 2;
    VIPStatus Status = 3;
    int64 StartTime = 4;
    int64 EndTime = 5;
    int64 RemainingDays = 6;
    int64 TotalConsume = 7;
    int64 TargetConsume = 8;
    VIPBadge Badge = 9;
    map<int64, int64> PrivilegesMap = 10;
  }
  
  message UserVoteInfo {
    bool HasVoted = 1;
    int32 VoteOptionIndex = 2;
  }
  
  message VideoResource {
    string VideoTypeName = 1;
    Image VideoUrl = 2;
    string VideoMd5 = 3;
  }
  
  message VIPBadge {
    map<int64, Image> IconsMap = 1;
  }
  
  message VIPOpenInfo {
    int64 OpenPrice = 1;
    int64 RenewPrice = 2;
  }
  
  message VoteResponseData {
    repeated Messages.PollOptionInfo OptionList = 1;
    bool CommentBanned = 2;
  }
  
  message VoteUser {
    int64 UserId = 1;
    string NickName = 2;
    Image AvatarThumb = 3;
  }
  
  message WalletPackage {
    string IapId = 1;
    string UsdPriceShow = 2;
  }
  
  message WarningTag {
    Text Text = 1;
    int64 Duration = 2;
    int32 TagSource = 3; // Possibly an Enum (BizType?)
    PunishEventInfo PunishInfo = 4;
    int32 Style = 5; // Possibly an Enum
    string DetailUrl = 6;
  }
}

/**

-=-=-=-=-=-=-=-=-=-=-=
        LinkMic       
-=-=-=-=-=-=-=-=-=-=-=

*/

message LinkMic {

/**
----------------------
        Enums         
----------------------
*/

  enum AgreeStatus
  {
    Agree_Unknown = 0;
    Agree = 1;
    Reject = 2;
  }
  
  enum FinishReason
  {
    Finish_Reason_Unknown = 0;
    Finish_Reason_Host_Trigger = 10001;
    Finish_Reason_M_Sequence_Permission_Finish = 10002;
    Finish_Reason_Interrupt_By_Co_Host = 10003;
    Finish_Reason_Illegal_Live = 10010;
    Finish_Reason_RTC_Err = 10011;
    Finish_Reason_Live_Stream_Err = 10012;
  }
  
  enum GroupStatus
  {
    Group_Status_Unknown = 0;
    Group_Status_Waiting = 1;
    Group_Status_Linked = 3;
  }
  
  enum JoinType
  {
    Join_Type_Unknown = 0;
    Channel_Apply = 1;
    Channel_Invite = 2;
    Group_Apply = 100;
    Group_Apply_Follow = 101;
    Group_Invite = 102;
    Group_Invite_Follow = 103;
    Group_Owner_Join = 104;
  }
  
  enum KickoutReason
  {
    Kickout_Reason_Unknown = 0;
    Kickout_Reason_First_Frame_Timeout = 1;
    Kickout_Reason_By_Host = 2;
    Kickout_Reason_RTC_Lost_Connection = 3;
    Kickout_Reason_By_Punish = 4;
    Kickout_Reason_By_Admin = 5;
    Kickout_Reason_Host_Remove_All_Guests = 6;
  }
  
  enum LeaveReason
  {
    Leave_Reason_Unknown = 0;
    Leave_Reason_By_Client = 10000;
    Leave_Reason_Click_Window = 10001;
    Leave_Reason_Click_Panel = 10002;
    Leave_Reason_Exit_Live_Room = 10003;
    Leave_Reason_Feedback = 10004;
    Leave_Reason_OneClick_Go_Live = 10005;
    Leave_Reason_ReEnter_Room = 10011;
    Leave_Reason_Linkmic_Slot_Full = 10012;
    Leave_Reason_Kill_Background_Three_Mins = 10013;
    Leave_Reason_Kill_Process = 10014;
    Leave_Reason_Pip = 10015;
    Leave_Reason_Copyright_Warning = 10016;
    Leave_Reason_Only_Me = 10017;
    Leave_Reason_Reset_Ready_Or_Waiting = 10018;
    Leave_Reason_Reply_Failure = 10021;
    Leave_Reason_JoinChannel_Failure = 10022;
    Leave_Reason_Permit_Timeout = 10023;
    Leave_Reason_RTC_Unrecoverable_Error = 10031;
    Leave_Reason_RTC_Start_Failure = 10032;
    Leave_Reason_Local_Stream_Timeout = 10033;
    Leave_Reason_Anchor_Offline = 10034;
    Leave_Reason_Close_Apply_Voice_Mic_Panel = 10041;
    Leave_Reason_Close_Invited_Voice_Mic_Panel = 10042;
    Leave_Reason_Close_Apply_Preview_Panel = 10043;
    Leave_Reason_Close_Invited_Preview_Panel = 10044;
    Leave_Reason_Apply_Voice_Mic_Panel_Timeout = 10045;
    Leave_Reason_Invited_Voice_Mic_Panel_Timeout = 10046;
    Leave_Reason_Apply_Preview_Panel_Timeout = 10047;
    Leave_Reason_Invited_Preview_Panel_Timeout = 10048;
    Leave_Reason_By_Server = 20000;
  }
  
  enum LinkMicUserAdminType
  {
    Undefined_Type = 0;
    Manager_Type = 1;
    Host_Type = 2;
  }
  
  enum LinkType
  {
    Link_Unknown = 0;
    Audio = 1;
    Video = 2;
  }
  
  enum MediaState
  {
    Media_Undefined = 0;
    Media_Normal = 1;
    Media_Muted = 2;
    Media_Unmute_Occupied = 3;
    Media_Muted_Occupied = 4;
  }
  
  enum MessageType
  {
    Message_Invalid = 0;
    Message_IM = 1;
    Message_RTS = 2;
  }
  
  enum NetworkState
  {
    State_Network_Undefined = 0;
    State_Network_Excellent = 1;
    State_Network_Good = 2;
    State_Network_Poor = 3;
    State_Network_Bad = 4;
    State_Network_VBad = 5;
    State_Network_Down = 6;
  }
  
  enum OnlineUserState
  {
    State_Undefined = 0;
    State_Normal = 1;
    State_Paused = 2;
  }
  
  enum RechargeType
  {
    Recharge_Unknown = 0;
    Recharge_Invite = 1;
    Recharge_Reply = 2;
    Recharge_Group_List = 3;
  }
  
  enum ReplyStatus
  {
    Reply_Status_Unknown = 0;
    Reply_Status_Agree = 1;
    Reply_Status_Refuse_Personally = 2;
    Reply_Status_Refuse_Type_Not_Support = 3;
    Reply_Status_Refuse_Processing_Invitation = 4;
    Reply_Status_Refuse_By_Timeout = 5;
    Reply_Status_Refuse_Exception = 6;
    Reply_Status_Refuse_System_Not_Supported = 7;
    Reply_Status_Refuse_Subtype_Difference = 8;
    Reply_Status_Refuse_In_MicRoom = 9;
    Reply_Status_Refuse_Not_Load_Plugin = 10;
    Reply_Status_Refuse_In_Multi_Guest = 11;
    Reply_Status_Refuse_Pause_Live = 12;
    Reply_Status_Refuse_Open_Camera_Dialog_Showing = 13;
    Reply_Status_Refuse_Draw_Guessing = 14;
    Reply_Status_Refuse_Random_Matching = 15;
    Reply_Status_Refuse_In_Match_Processing = 16;
    Reply_Status_Refuse_In_MicRoom_For_Multi_Cohost = 17;
    Reply_Status_Refuse_Cohost_Finished = 18;
    Reply_Status_Refuse_Not_Connected = 19;
    Reply_Status_Refuse_Linkmic_Full = 20;
    Reply_Status_Refuse_Arc_Incompatible = 21;
    Reply_Status_Refuse_Processing_Other_Invite = 22;
    Reply_Status_Refuse_Processing_Other_Apply = 23;
    Reply_Status_Refuse_In_Anchor_Cohost = 24;
    Reply_Status_Refuse_Topic_Pairing = 25;
  }
  
  enum RtcConnectionState
  {
    State_RTC_Undefined = 0;
    State_RTC_Normal = 1;
    State_RTC_Diconnect = 2;
  }
  
  enum Scene
  {
    Scene_Unknown = 0;
    Scene_Co_Host = 2;
    Scene_Multi_Live = 4;
  }
  
  enum SourceType
  {
    Source_Type_Unknown = 0;
    Source_Type_Friend_List = 1;
    Source_Type_Recommend_List = 2;
    Source_Type_Recent = 3;
    Source_Type_Other_Follow = 4;
    Source_Type_Quick_Pair = 5;
    Source_Type_Activity = 6;
    Source_Type_Quick_Recommend = 7;
    Source_Type_Official_Channel = 8;
    Source_Type_Best_Teammate = 9;
    Source_Type_Rerservation = 10;
    Source_Type_Pairing = 11;
    Source_Type_Pairing_On_Reservation = 12;
    Source_Type_Topic_Quick_Pair = 13;
    Source_Type_Topic_Quick_Recommend = 14;
    Source_Type_Weekly_Rank = 20;
    Source_Type_Hourly_Rank = 21;
    Source_Type_Weekly_Rising = 23;
    Source_Type_Weekly_Rookie = 24;
    Source_Type_Connection_List = 25;
    Source_Type_Daily_Rank = 26;
    Source_Type_Daily_Rank_Hall_Of_Fame = 27;
    Source_Type_Reservation_Bubble = 28;
    Source_Type_Pairing_Bubble = 29;
    Source_Type_League_Phase_One = 30;
    Source_Type_League_Phase_Two = 31;
    Source_Type_League_Phase_Three = 32;
    Source_Type_Daily_Rookie = 33;
    Source_Type_May_Know_List = 34;
    Source_Type_Banner = 35;
  }
  
  enum StateType
  {
    State_Invalid = 0;
    State_Layout = 1;
    State_Online_User_State = 2;
    State_Audio_Mute = 3;
    State_Video_Mute = 4;
    State_RTC_Connection = 5;
    State_Network = 6;
    State_Background_Image = 7;
  }

/**
----------------------
       Objects        
----------------------
*/

  message AllListUser {
    repeated LinkLayerListUser LinkedList = 2;
    repeated LinkLayerListUser AppliedList = 3;
    repeated LinkLayerListUser InvitedList = 4;
    repeated LinkLayerListUser ReadyList = 5;
  }
  
  message BackGroundImageState {
    string StickerId = 1;
  }
  
  message ByteRTCExtInfo {
    int32 DefaultSignalingServerFirst = 1;
  }
  
  message CohostUserInfo {
    int64 PermissionType = 1;
    SourceType SourceType = 2;
    bool IsLowVersion = 3;
    int64 BestTeammateUid = 4;
    string Nickname = 11;
    string DisplayId = 12;
    Data.Image AvatarThumb = 13;
    int64 FollowStatus = 14;
  }
  
  message DSLConfig {
    int32 SceneVersion = 1;
    string LayoutId = 2;
  }
  
  message GroupChannelAllUser {
    int64 GroupChannelId = 1;
    repeated GroupChannelUser UserList = 2;
  }
  
  message GroupChannelUser {
    int64 ChannelId = 1;
    GroupStatus Status = 2;
    JoinType Type = 3;
    AllListUser AllUser = 4;
    int64 JoinTime = 5;
    int64 LinkedTime = 6;
    GroupPlayer OwnerUser = 7;
  }
  
  message GroupPlayer {
    int64 ChannelId = 1;
    Player User = 2;
  }
  
  message LayoutState {
    string LayoutId = 1;
  }
  
  message LinkBaseResp {
    int64 ErrCode = 1;
    string ErrMsg = 2;
    map<string, bytes> ExtraMap = 3;
  }
  
  message LinkCommon {
    int32 Scene = 1;
    string Source = 200;
    int64 AppId = 201;
    int64 LiveId = 202;
    map<string, string> ExtraMap = 203;
  }
  
  message LinkLayerListUser {
    Player User = 1;
    string LinkmicId = 2;
    Position Pos = 3;
    int64 LinkedTimeNano = 4;
    string AppVersion = 5;
  }
  
  message LinkMicAdContent {
    int64 RoomId = 1;
    int64 AdId = 2;
    int64 Duration = 3;
    int64 PlayTimes = 4;
    string Url = 5;
  }
  
  message LinkPosition {
    int32 Position = 1;
    int32 Opt = 2;
  }
  
  message LinkUserState {
    Player User = 1;
    string LinkmicId = 2;
    Position Pos = 3;
    int64 LinkedTimeNano = 4;
    OnlineUserState OnlineUserState = 5;
    MediaState AudioMuted = 6;
    MediaState VideoMuted = 7;
    RtcConnectionState RtcConnection = 8;
    NetworkState NetworkState = 9;
  }
  
  message Player {
    int64 RoomId = 1;
    int64 UserId = 2;
  }
  
  message Position {
    int32 Type = 1;
    LinkPosition Link = 2;
  }
  
  message PositionConfig {
    int32 MaxPosition = 1;
  }
  
  message RTCBitrateMap {
    int32 XX1 = 1;
    int32 XX2 = 2;
    int32 XX3 = 3;
    int32 XX4 = 4;
  }
  
  message RTCDualStreamParam {
    int32 RemoteDefaultStreamType = 1;
    int32 IsAutoSwitch = 2;
    int32 AutoSwitchUserNum = 3;
    RTCVideoParam HdVideoParam = 4;
    RTCVideoParam SdVideoParam = 5;
  }
  
  message RTCEngineConfig {
    string RTCAppId = 1;
    string RTCUserId = 2;
    string RTCToken = 3;
    int64 RTCChannelId = 4;
  }
  
  message RTCExtraInfo {
    RTCEngineConfig LiveRTCEngineConfig = 1;
    repeated RTCLiveVideoParam LiveRTCVideoParamList = 2;
    RTCBitrateMap RTCBitrateMap = 3;
    int32 RTCFps = 4;
    RTCMixBase RTCMixBase = 5;
    ByteRTCExtInfo ByteRTCExtInfo = 6;
    RTCInfoExtra Extra = 7;
    string RTCBusinessId = 8;
    RTCOther RTCOther = 9;
    int32 InteractClientType = 10;
  }
  
  message RtcInfo {
    string Info = 1;
    string LinkMicId = 2;
  }
  
  message RTCInfoExtra {
    string Version = 1;
  }
  
  message RTCLiveVideoParam {
    int32 StrategyId = 1;
    RTCVideoParam Params = 2;
  }
  
  message RTCMixBase {
    int32 Bitrate = 1;
  }
  
  message RTCMixParam {
    int32 VideoBitrateKbps = 1;
  }
  
  message RTCOther {
    int32 MaxTranscodingCbIntervalSecond = 1;
  }
  
  message RTCVideoParam {
    int32 Width = 1;
    int32 Height = 2;
    int32 Fps = 3;
    int32 BitrateKbps = 4;
  }
  
  message StateReqCommon {
    int32 Scene = 1;
    int64 AppId = 2;
    int64 LiveId = 3;
    Player Myself = 4;
    int64 ChannelId = 5;
  }
}

/**

-=-=-=-=-=-=-=-=-=-=-=
       Messages       
-=-=-=-=-=-=-=-=-=-=-=

*/

message Messages {

/**
----------------------
        Enums         
----------------------
*/

  enum AnimationInfoType
  {
    NoAnimation = 0;
    EnterRank = 1;
    LeaveRank = 2;
    Rise = 3;
    Fall = 4;
    AfterSettle = 5;
  }
  
  enum BizType
  {
    Default = 0;
    Rethink_Chat = 1;
    Rethink_QA = 2;
    WarningTag_CurrentRoom = 3;
    WarningTag_CoHostRoom = 4;
    AGS_AtRiskOfUnableToComment = 5;
    PerceptionCenter = 6;
  }
  
  enum ContentInviteSource
  {
    Invite_Source_Unknown = 0;
    Invite_Source_Panel_GoLive = 1;
    Invite_Source_Mutual_Notice = 2;
    Invite_Source_User_Profile = 3;
    Invite_Source_Reserve = 4;
  }
  
  enum DisplayStyle
  {
    DisplayStyleNormal = 0;
    DisplayStyleStay = 1;
    DisplayStyleChat = 2;
  }
  
  enum ExhibitionType
  {
    ExhibitionType_Default = 0;
    ExhibitionType_Fold = 1;
    ExhibitionType_PublicScreen = 2;
  }
  
  enum GiftDisplayEffect
  {
    Unused = 0;
    Chat = 1;
    Tray = 2;
    Effect = 4;
  }
  
  enum IMDispatchStrategy
  {
    IM_Dispatch_Strategy_Default = 0;
    IM_Dispatch_Strategy_Bypass_Dispatch_Queue = 1;
  }
  
  enum LinkerSceneType
  {
    Scene_Unknown = 0;
    Scene_PK = 1;
    Scene_AnchorLinkMic = 2;
    Scene_VirutalPK = 3;
    Scene_AudienceLinkMic = 4;
    Scene_AudioChatRoom = 5;
    Scene_CloudGame = 6;
    Scene_AnchorMultiLinkMic = 7;
    Scene_VideoChatRoom = 8;
    Scene_SocialLinkMic = 9;
  }
  
  enum LinkLayerMessageType
  {
    Linker_Unknown = 0;
    Linker_Create = 1;
    Linker_Invite = 2;
    Linker_Apply = 3;
    Linker_Permit = 4;
    Linker_Reply = 5;
    Linker_Kick_Out = 6;
    Linker_Cancel_Apply = 7;
    Linker_Cancel_Invite = 8;
    Linker_Leave = 9;
    Linker_Finish = 10;
    Linker_List_Change = 11;
    Linker_Join_Direct = 12;
    Linker_Join_Group = 13;
    Linker_Permit_Group = 14;
    Linker_Cancel_Group = 15;
    Linker_Leave_Group = 16;
    Linker_P2P_Group_Change = 17;
    Linker_Group_Change = 18;
  }
  
  enum LinkMessageType
  {
    Tpye_Linker_Unknown = 0;
    Type_Linker_Create = 1;
    Type_Linker_Close = 2;
    Type_Linker_Invite = 3;
    Type_Linker_Apply = 4;
    Type_Linker_Reply = 5;
    Type_Linker_Enter = 6;
    Tpye_Linker_Leave = 7;
    Type_Linker_Permit = 8;
    Tpye_Linker_Cancel_Invite = 9;
    Type_Linker_Waiting_List_Change = 10;
    Type_Linker_Linked_List_Change = 11;
    Type_Linker_Update_User = 12;
    Tpye_Linker_Kick_Out = 13;
    Tpye_Linker_Cancel_Apply = 14;
    Type_Linker_Mute = 15;
    Type_Linker_Match = 16;
    Type_Linker_Update_User_Settings = 17;
    Type_Linker_Mic_IDX_Update = 18;
    Type_Linker_Leave_V2 = 19;
    Type_Linker_Waiting_List_Change_V2 = 20;
    Type_Linker_Linked_List_Change_V2 = 21;
    Type_Linker_CoHost_List_Change = 22;
    Type_Linker_Media_Change = 23;
    Type_Linker_Accept_Notice = 24;
    Tpye_Linker_Sys_Kick_Out = 101;
    Tpye_LinkMic_User_Toast = 102;
  }
  
  enum LinkMicMethodMessageType
  {
    Type_None = 0;
    Type_TurnOn = 1;
    Type_Permit = 2;
    Type_KickOuted = 3;
    Type_Finish = 4;
    Type_Waiting_List_Changed = 5;
    Type_Linked_List_Changed = 6;
    Type_All_List_Changed = 7;
    Type_Fan_Ticket_Changed = 8;
    Type_Ranking_Update = 9;
    Type_Silence = 10;
    Type_Unsilence = 11;
    Type_Invite = 12;
    Type_Reply = 13;
    Type_Auto_Join = 14;
    Type_Agree_Admin_First_Invite = 15;
  }
  
  enum ListChangeType
  {
    List_Leave = 0;
    List_Join_Channel = 1;
    List_Apply = 2;
    List_Invite = 3;
    List_Kick_Out = 4;
    List_Cancel_Invite = 5;
    List_Cancel_Apply = 6;
    List_Join_Direct = 7;
    List_Permit = 8;
    List_M_Update_Position = 9;
    List_Inner_State_Change_Notify = 10;
  }
  
  enum MaterialAuditStatus
  {
    NotReviewed = 0;
    UnderReview = 1;
    ReviewPass = 2;
    ReviewRejected = 3;
    ReviewAbandon = 4;
  }
  
  enum MessageType
  {
    MessageType_SubSuccess = 0;
    MessageType_AnchorReminder = 1;
    MessageType_EnterRoomExpireSoon = 2;
    MessageType_SubGoalCreateToAnchor = 3;
    MessageType_SubGoalCompleteToAudience = 4;
    MessageType_SubGoalCompleteToAnchor = 5;
    MessageType_SubGiftTikTok2UserNotice = 6;
    MessageType_SubGiftTikTok2AnchorNotice = 7;
    MessageType_SubGiftReceiveSendNotice = 8;
    MessageType_SubGiftSendSucceedRoomMessage = 9;
    MessageType_SubGiftSendSucceedAnchorNotice = 10;
    MessageType_SubGiftLowVersionUpgradeNotice = 11;
    MessageType_SubGiftUserBuyAuthNotice = 12;
  }
  
  enum MicIdxOperation
  {
    Mic_IDX_Op_On = 0;
    Mic_IDX_Op_Off = 1;
  }
  
  enum OldSubscribeStatus
  {
    OldSubscribeStatus_First = 0;
    OldSubscribeStatus_Resub = 1;
    OldSubscribeStatus_SubInGracePeriod = 2;
    OldSubscribeStatus_SubNotInGracePeriod =3;
    OldSubscribeStatus_Default = 100;
  }
  
  enum OpType
  {
    Op_Type_Default = 0;
    Op_Type_Add = 1;
    Op_Type_Remove = 2;
  }
  
  enum ShowType
  {
    Hover = 0;
    Plug = 1;
  }
  
  enum SubscribeType
  {
    SubscribeType_Once = 0;
    SubscribeType_Auto = 1;
    SubscribeType_Default = 100;
  }
  
  enum SubscribingStatus
  {
    SubscribingStatus_Unknown = 0;
    SubscribingStatus_Once = 1;
    SubscribingStatus_Circle = 2;
    SubscribingStatus_CircleCancel = 3;
    SubscribingStatus_Refund = 4;
    SubscribingStatus_InGracePeriod = 5;
    SubscribingStatus_NotInGracePeriod = 6;
  }
  
  enum TextType
  {
    Display_Text = 0;
    Content = 1;
  }
  
  enum VerifyAction
  {
    UnknowAction = 0; // Typo exists in TikTok's Code
    CloseChat = 3;
    OpenChat = 4;
    ClosedAnmaku = 5;
    OpendAnmaku = 6; // Typo exists in TikTok's Code
    CloseGift = 7;
    OpenGift = 8;
    ClosedIGG = 12;
    OpendIGG = 13; // Typo exists in TikTok's Code
    ChangeTitle = 21;
    ChangeShortTitle = 22;
    ChangeIntroduction = 23;
    CloseBanner = 24;
    OpenBanner = 25;
    OpenAudioChat = 26;
    CloseAudioChat = 27;
    OpenAudioChatAutoPlay = 28;
    CloseAudioChatAutoPly = 29; // Typo exists in TikTok's Code
    OpenRank = 30;
    CloseRank = 31;
    OpenUserCount = 32;
    CloseUserCount = 33;
    OpenViewers = 34;
    CloseViewers = 35;
    OpenChatSubOnly = 36;
    CloseChatSubOnly = 37;
    OpenExplore = 38;
    CloseExplore = 39;
  }

/**
----------------------
       Objects        
----------------------
*/

  message AccessControlCaptcha {
    int64 CaptchaRecordId = 1;
    int64 RoomId = 2;
    int64 VerifyDurationInSec = 3;
  }
  
  message AccessControlMessage {
    Header Header = 1;
    oneof MsgContentCase {
      AccessControlCaptcha Captcha = 2;
    }
  }
  
  message AccessRecallMessage {
    Header Header = 1;
    int32 Status = 2;
    int64 Duration = 3;
    int64 EndTime = 4;
    string Scene = 5;
    Data.Text Notice = 6;
    Data.Text Content = 7;
    Data.PunishEventInfo PunishInfo = 8;
  }
  
  message AlertAudio {
    int64 Id = 1;
    int32 AlertType = 2;
    string TOSUrl = 3;
    Data.AuditStatus AuditStatus = 4;
  }
  
  message AlertBoxAuditResultMessage {
    Header Header = 1;
    int64 UserId = 2;
    repeated AlertImage ImageList = 3;
    repeated AlertText TextList = 4;
    string Scene = 5;
    repeated AlertAudio AudioList = 6;
  }
  
  message AlertImage {
    int64 Id = 1;
    int32 AlertType = 2;
    string TOSUrl = 3;
    Data.AuditStatus AuditStatus = 4;
  }
  
  message AlertText {
    int64 Id = 1;
    int32 AlertType = 2;
    string Text = 3;
    Data.AuditStatus AuditStatus = 4;
  }
  
  message ApplyBizContent {
    Data.User User = 1;
  }
  
  message ApplyContent {
    LinkMic.Player Applier = 1;
    string ApplierLinkMicId = 2;
  }
  
  message BarrageEvent {
    string EventName = 1;
    map<string, string> ParamsMap = 2;
  }
  
  message BarrageMessage {
    Header Header = 1;
    BarrageEvent Event = 2;
    BarrageType MsgType = 3;
    Data.Image Icon = 4;
    Data.Text Content = 5;
    int64 Duration = 6;
    Data.Image Background = 7;
    Data.Image RightIcon = 8;
    BarrageTypeUserGradeParam UserGradeParam = 100;
    BarrageTypeFansLevelParam FansLevelParam = 101;
    BarrageTypeSubscribeGiftParam SubscribeGiftParam = 102;
    
    enum BarrageType
    {
      BarrageType_Unknown = 0;
      EComOrdering = 1;
      EComBuying = 2;
      Normal = 3;
      Subscribe = 4;
      EventView = 5;
      EventRegistered = 6;
      SubscribeGift = 7;
      UserUpgrade = 8;
      GradeUserEntranceNotification = 9;
      FansLevelUpgrade = 10;
      FansLevelEntrance = 11;
      GamePartnership = 12;
    }
  }
  
  message BarrageTypeFansLevelParam {
    int32 CurrentGrade = 1;
    int32 DisplayConfig = 2;
    Data.User User = 3;
  }
  
  message BarrageTypeSubscribeGiftParam {
    int64 GiftSubCount = 1;
    bool ShowGiftSubCount = 2;
  }
  
  message BarrageTypeUserGradeParam {
    int32 CurrentGrade = 1;
    int32 DisplayConfig = 2;
    string UserId = 3;
    Data.User User = 4;
  }
  
  message BindingGiftMessage {
    GiftMessage Message = 1;
    Header Header = 2;
  }
  
  message BoostCard {
    int64 Id = 1;
    int32 TaskSource = 2;
    int64 TaskId = 3;
  }
  
  message BoostCardMessage {
    Header Header = 1;
    repeated BoostCard CardsList = 2;
  }
  
  message BottomMessage {
    Header Header = 1;
    string Content = 2;
    ShowType ShowType = 3;
    TextType TextType = 4;
    int64 Duration = 5;
    BizType BizType = 6;
    int64 ViolationUserId = 7;
    Data.PunishEventInfo PunishInfo = 8;
    int32 Style = 9;
    string DetailUrl = 10;
    int32 FloatStyle = 11;
  }
  
  message BusinessContent {
    int64 OverLength = 1;
    oneof BusinessCase {
      MultiLiveContent MultiLiveContent = 100;
      CohostContent CohostContent = 200;
    }
  }
  
  message CancelApplyContent {
    LinkMic.Player Applier = 1;
    string ApplierLinkMicId = 2;
  }
  
  message CancelInviteContent {
    LinkMic.Player Invitor = 1;
    string InvitorLinkMicId = 2;
    string InviteeLinkMicId = 3;
    int64 InviteSeqId = 4;
    LinkMic.Player Invitee = 5;
  }
  
  message CancelJoinGroupContent {
    repeated LinkMic.GroupPlayer LeaverList = 1;
    LinkMic.GroupPlayer Operator = 2;
    ListChangeType Type = 3;
  }
  
  message CaptionData {
    string ISOLanguage = 1;
    string Value = 2;
  }
  
  message CaptionMessage {
    Header Header = 1;
    int64 Timestamp = 2;
    int64 Data3 = 3; // Duration? EndTime?
    CaptionData CaptionData = 4;
  }
  
  message ChatMessage {
    Header Header = 1;
    Data.User User = 2;
    string Content = 3;
    bool VisibleToSender = 4;
    Data.Image BackgroundImage = 5;
    string FullScreenTextColor = 6;
    Data.Image BackgroundImageV2 = 7;
    PublicAreaCommon PublicAreaCommon = 9;
    Data.Image GiftImage = 10;
    int32 InputType = 11;
    repeated Data.User MentionedUsers = 12;
    repeated EmoteWithIndex EmotesList = 13;
    string ContentLanguage = 14;
    Data.MsgFilter MsgFilter = 15;
    int32 QuickChatScene = 16;
    int32 CommunityFlaggedStatus = 17;
    Data.UserIdentity UserIdentity = 18;
    repeated CommentQualityScore CommentQualityScores = 19;
    
    message EmoteWithIndex {
      int64 Index = 1;
      Data.Emote Emote = 2;
    }
  }
  
  message CohostContent {
    oneof BusinessCase {
      JoinGroupBizContent JoinGroupBizContent = 1;
      PermitJoinGroupBizContent PermitJoinGroupBizContent = 2;
      ListChangeBizContent ListChangeBizContent = 3;
    }
  }
  
  message CohostListChangeContent {
    repeated Data.CohostListUser UsersList = 1;
  }
  
  message CommentQualityScore {
    string Version = 1;
    int64 Score = 2;
  }
  
  message ControlMessage {
    Header Header = 1;
    int64 Action = 2; // 1 = Paused, 3 = Ended
    string Tips = 3;
    Extra ExtraData = 4;
    Data.PerceptionDialogInfo PerceptionDialog = 5;
    Data.Text PerceptionAudienceText = 6;
    Data.PunishEventInfo PunishInfo = 7;
    Data.Text FloatText = 8;
    int32 FloatStyle = 9;
    
    message Extra {
      string BanInfoUrl = 1;
      int64 ReasonNo = 2;
      Data.Text Title = 3;
      Data.Text ViolationReason = 4;
      Data.Text Content = 5;
      Data.Text GotItButton = 6;
      Data.Text BanDetailButton = 7;
      string Source = 8;
    }
  }
  
  message CreateChannelContent {
    LinkMic.Player Owner = 1;
    string OwnerLinkMicId = 2;
  }
  
  message EmoteChatMessage {
    Header Header = 1;
    Data.User User = 2;
    repeated Data.Emote EmoteList = 3;
    Data.MsgFilter MsgFilter = 4;
    Data.UserIdentity UserIdentity = 5;
  }
  
  message EnvelopeMessage {
    Header Header = 1;
    EnvelopeInfo Envelope_Info = 2;
    DisplayStyle Display = 3;
    
    message EnvelopeInfo {
      string EnvelopeId = 1;
      Data.EnvelopeBusinessType BusinessType = 2;
      string EnvelopeIdc = 3;
      string SendUserName = 4;
      int32 DiamondCount = 5;
      int32 PeopleCount = 6;
      int32 UnpackAt = 7;
      string SendUserId = 8;
      Data.Image SendUserAvatar = 9;
      string CreateAt = 10;
      string RoomId = 11;
      Data.EnvelopeFollowShowStatus FollowShowStatus = 12;
      int32 SkinId = 13;
    }
  }
  
  message FanTicketRoomNoticeContent {
    repeated UserFanTicket UserFanTicketList = 1;
    int64 TotalLinkMicFanTicket = 2;
    int64 MatchId = 3;
    int64 EventTime = 4;
    string FanTicketIconUrl = 5;
  }
  
  message FinishChannelContent {
    LinkMic.Player Owner = 1;
    int64 FinishReason = 2;
  }
  
  message FlexImageStruct {
    repeated string UrlList = 1;
    string Uri = 2;
    repeated int64 FlexSettingList = 3;
  }
  
  message GameRankNotifyMessage {
    Header Header = 1;
    MessageType MsgType = 2;
    Data.Text NotifyText = 3;
  }
  
  message GiftMessage {
    Header Header = 1;
    int64 GiftId = 2;
    int64 FanTicketCount = 3;
    int64 GroupCount = 4;
    int64 RepeatCount = 5;
    int64 ComboCount = 6;
    Data.User User = 7;
    Data.User ToUser = 8;
    int32 RepeatEnd = 9;
    TextEffect Text_Effect = 10;
    int64 GroupId = 11;
    int64 IncomeTaskGifts = 12;
    int64 RoomFanTicketCount = 13;
    Data.GiftIMPriority Priority = 14;
    Data.GiftStruct Gift = 15;
    string LogId = 16;
    int64 SendType = 17;
    PublicAreaCommon PublicAreaCommon = 18;
    Data.Text TrayDisplayText = 19;
    int64 BannedDisplayEffects = 20;
    Data.GiftTrayInfo TrayInfo = 21;
    string MonitorExtra = 22;
    GiftMonitorInfo MonitorInfo = 23;
    int64 ColorId = 24;
    bool IsFirstSent = 25;
    Data.Text DisplayTextForAnchor = 26;
    Data.Text DisplayTextForAudience = 27;
    string OrderId = 28;
    Data.GiftsInBox GiftsInBox = 29;
    Data.MsgFilter MsgFilter = 30;
    repeated Data.LynxGiftExtra LynxExtraList = 31;
    Data.UserIdentity UserIdentity = 32;
    Data.MatchInfo MatchInfo = 33;
    Data.LinkmicGiftExpressionStrategy LinkmicGiftExpressionStrategy = 34;
    Data.FlyingMicResources FlyingMicResources = 35;
    bool DisableGiftTracking = 36;
    
    message TextEffect {
      Detail Portrait = 1;
      Detail Landscape = 2;
      
      message Detail {
        Data.Text Text = 1;
        int32 TextFontSize = 2;
        Data.Image Background = 3;
        int32 Start = 4;
        int32 Duration = 5;
        int32 X = 6;
        int32 Y = 7;
        int32 Width = 8;
        int32 Height = 9;
        int32 ShadowDx = 10;
        int32 ShadowDy = 11;
        int32 ShadowRadius = 12;
        string ShadowColor = 13;
        string StrokeColor = 14;
        int32 StrokeWidth = 15;
      }
    }
  }
  
  message GiftMonitorInfo {
    int64 AnchorId = 1;
    int64 ProfitApiMessageDur = 2;
    int64 SendGiftProfitApiStartMs = 3;
    int64 SendGiftProfitCoreStartMs = 4;
    int64 SendGiftReqStartMs = 5;
    int64 SendGiftSendMessageSuccessMs = 6;
    int64 SendProfitApiDur = 7;
    int64 ToUserId = 8;
    int64 SendGiftStartClientLocalMs = 9;
    string FromPlatform = 10;
    string FromVersion = 11;
  }
  
  message GiftPromptMessage {
    Header Header = 1;
    string Title = 2;
    string Body = 3;
    int32 BlockNumDays = 4;
    string OrderId = 5;
    int64 OrderTimestamp = 6;
  }
  
  message GoalUpdateMessage {
    Header Header = 1;
    Data.Indicator Indicator = 2;
    Data.Goal Goal = 3;
    int64 ContributorId = 4;
    Data.Image ContributorAvatar = 5;
    string ContributorDisplayId = 6;
    Data.SubGoal SubGoal = 7;
    int64 ContributeCount = 9;
    int64 ContributeScore = 10;
    int64 GiftRepeatCount = 11;
    string ContributorIdStr = 12;
    bool Pin = 13;
    bool Unpin = 14;
    Data.GoalPinInfo PinInfo = 15;
  }
  
  message GroupChangeContent {
    LinkMic.GroupChannelAllUser GroupUser = 1;
  }
  
  message Header {
    string Method = 1;
    int64 MsgId = 2;
    int64 RoomId = 3;
    int64 CreateTime = 4;
    int32 Monitor = 5;
    bool IsShowMsg = 6;
    string Describe = 7;
    Data.Text DisplayText = 8;
    int64 FoldType = 9;
    int64 AnchorFoldType = 10;
    int64 PriorityScore = 11;
    string LogId = 12;
    string MsgProcessFilterK = 13;
    string MsgProcessFilterV = 14;
    string FromIdc = 15;
    string ToIdc = 16;
    repeated string FilterMsgTagsList = 17;
    Data.LiveMessageSEI SEI = 18;
    Data.LiveMessageID DependRootId = 19;
    Data.LiveMessageID DependId = 20;
    int64 AnchorPriorityScore = 21;
    int64 RoomMessageHeatLevel = 22;
    int64 FoldTypeForWeb = 23;
    int64 AnchorFoldTypeForWeb = 24;
    int64 ClientSendTime = 25;
    IMDispatchStrategy DispatchStrategy = 26;
  }
  
  message ImDeleteMessage {
    Header Header = 1;
    repeated int64 DeleteMsgIdsList = 2;
    repeated int64 DeleteUserIdsList = 3;
  }
  
  message InRoomBannerMessage {
    Header Header = 1;
    string Extra = 2; // Is JSON
    int32 Position = 3; // Possibly an Enum?
    int32 ActionType = 4; // Possibly an Enum?
  }
  
  message InviteBizContent {
    Data.LinkmicUserSettingInfo AnchorSettingInfo = 1;
    ContentInviteSource InviteSource = 2;
    Data.User OperatorUserInfo = 3;
    LinkMic.LinkMicUserAdminType OperatorLinkAdminType = 4;
    Data.User InviteeUserInfo = 5;
  }
  
  message InviteContent {
    LinkMic.Player Invitor = 1;
    LinkMic.RTCExtraInfo InviteeRtcExtInfo = 2;
    string InvitorLinkMicId = 3;
    string InviteeLinkMicId = 4;
    bool IsOwner = 5;
    LinkMic.Position Pos = 6;
    LinkMic.DSLConfig Dsl = 7;
    LinkMic.Player Invitee = 8;
    LinkMic.Player Operator = 9;
  }
  
  message InviteTopHostInfo {
    string RankType = 1;
    int64 TopIndex = 2;
  }
  
  message JoinDirectBizContent {
    int64 ReplyImMsgId = 1;
  }
  
  message JoinDirectContent {
    LinkMic.LinkLayerListUser Joiner = 1;
    LinkMic.AllListUser AllUsers = 2;
  }
  
  message JoinGroupBizContent {
    int32 FromRoomAgeRestricted = 1;
    Data.Tag FromTag = 2;
    Data.PerceptionDialogInfo Dialog = 3;
    Data.PunishEventInfo PunishInfo = 4;
    JoinGroupMessageExtra JoinGroupMsgExtra = 101;
  }
  
  message JoinGroupContent {
    LinkMic.GroupChannelAllUser GroupUser = 1;
    LinkMic.GroupPlayer JoinUser = 2;
    LinkMic.JoinType Type = 3;
  }
  
  message JoinGroupMessageExtra {
    int64 SourceType = 1;
    RivalExtra Extra = 2;
    repeated RivalExtra OtherUsersList = 3;
    
    message RivalExtra {
      int64 UserCount = 4;
      Data.Image AvatarThumb = 5;
      string DisplayId = 6;
      AuthenticationInfo Authentication_Info = 7;
      string NickName = 8;
      int64 FollowStatus = 9;
      Data.Hashtag Hashtag = 10;
      Data.TopHostInfo TopHostInfo = 11;
      int64 UserId = 12;
      bool IsBestTeammate = 13;
      
      message AuthenticationInfo {
        string CustomVerify = 1;
        string EnterpriseVerifyReason = 2;
        Data.Image AuthenticationBadge = 3;
      }
    }
  }
  
  message KickOutBizContent {
    Data.User OperatorUserInfo = 1;
    LinkMic.LinkMicUserAdminType OperatorLinkAdminType = 2;
    Data.User KickPlayerUserInfo = 3;
  }
  
  message KickOutContent {
    LinkMic.Player Offliner = 1;
    LinkMic.KickoutReason KickoutReason = 2;
  }
  
  message LeaveContent {
    LinkMic.Player Leaver = 1;
    int64 LeaveReason = 2;
  }
  
  message LeaveJoinGroupContent {
    LinkMic.GroupPlayer Operator = 1;
    int64 GroupChannelId = 2;
    string LeaveSource = 3;
  }
  
  message LikeMessage {
    Header Header = 1;
    int64 Count = 2;
    int64 Total = 3;
    int64 Color = 4;
    Data.User User = 5;
    string Icon = 6;
    repeated Data.Image IconsList = 7;
    repeated SpecifiedDisplayText SpecifiedDisplayTextList = 8;
    int64 EffectCnt = 9;
    repeated Data.LikeEffect LikeEffectList = 10;
  }
  
  message LinkerAcceptNoticeContent {
    int64 FromUserId = 1;
    int64 FromRoomId = 2;
    int64 ToUserId = 3;
  }
  
  message LinkerCancelContent {
    int64 FromUserId = 1;
    int64 ToUserId = 2;
    int64 CancelType = 3;
    int64 ActionId = 4;
  }
  
  message LinkerCloseContent {
  
  }
  
  message LinkerCreateContent {
    int64 OwnerId = 1;
    int64 OwnerRoomId = 2;
    int64 LinkType = 3;
  }
  
  message LinkerEnterContent {
    repeated ListUser LinkedUsersList = 1;
    Data.LinkmicMultiLiveEnum AnchorMultiLiveEnum = 2;
    Data.LinkmicUserSettingInfo AnchorSettingInfo = 3;
  }
  
  message LinkerInviteContent {
    int64 FromUserId = 1;
    int64 FromRoomId = 2;
    string ToRtcExtInfo = 3;
    bool RtcJoinChannel = 4;
    int64 Vendor = 5;
    string SecFromUserId = 6;
    string ToLinkmicIdStr = 7;
    Data.User FromUser = 8;
    int64 RequiredMicIdx = 9;
    map<int64, string> RtcExtInfoMap = 10;
    Data.LinkmicMultiLiveEnum AnchorMultiLiveEnum = 11;
    Data.LinkmicUserSettingInfo AnchorSettingInfo = 12;
    string InviterLinkmicIdStr = 13;
    InviteTopHostInfo FromTopHostInfo = 16;
    int64 ActionId = 17;
    repeated LinkmicUserInfo LinkedUsersList = 18;
    Data.PerceptionDialogInfo Dialog = 19;
    Data.PunishEventInfo PunishInfo = 20;
    int32 FromRoomAgeRestricted = 21;
    Data.Tag FromTag = 22;
    repeated Data.CohostABTestSetting AbTestSettingList = 23;
    Data.LinkerInviteMessageExtra LinkerInviteMsgExtra = 101;
  }
  
  message LinkerKickOutContent {
    int64 FromUserId = 1;
    LinkMic.KickoutReason KickoutReason = 2;
  }
  
  message LinkerLeaveContent {
    int64 UserId = 1;
    string LinkmicIdStr = 2;
    int64 SendLeaveUid = 3;
    int64 LeaveReason = 4;
  }
  
  message LinkerLinkedListChangeContent {
    repeated ListUser LinkedUsersList = 1;
  }
  
  message LinkerListChangeContent {
    repeated ListUser LinkedUsersList = 1;
    repeated ListUser AppliedUsersList = 2;
    repeated ListUser ConnectingUsersList = 3;
  }
  
  message LinkerMediaChangeContent {
    MicIdxOperation Op = 1;
    int64 ToUserId = 2;
    int64 AnchorId = 3;
    int64 RoomId = 4;
    LinkerSceneType ChangeScene = 5;
  }
  
  message LinkerMicIdxUpdateContent {
    LinkerMicIdxUpdateInfo MicIdxUpdateInfo = 1;
  }
  
  message LinkerMicIdxUpdateInfo {
    MicIdxOperation Op = 1;
    int64 UserId = 2;
    int64 MicIdx = 3;
  }
  
  message LinkerMuteContent {
    int64 UserId = 1;
    Data.MuteStatus Status = 2;
  }
  
  message LinkerRandomMatchContent {
    Data.User User = 1;
    int64 RoomId = 2;
    int64 InviteType = 3;
    string MatchId = 4;
    int64 InnerChannelId = 5;
  }
  
  message LinkerReplyContent {
    int64 FromUserId = 1;
    int64 FromRoomId = 2;
    LinkmicInfo FromUserLinkmicInfo = 3;
    int64 ToUserId = 4;
    LinkmicInfo ToUserLinkmicInfo = 5;
    int64 LinkType = 6;
    int64 ReplyStatus = 7;
    LinkerSetting LinkerSetting = 8;
    Data.User FromUser = 9;
    Data.User ToUser = 10;
    map<int64, string> RtcExtInfoMap = 11;
    LinkerMicIdxUpdateInfo InviteeMicIdxUpdateInfo = 12;
    map<int64, int64> ApplierMicIdxInfoMap = 13;
    Data.LinkmicMultiLiveEnum AnchorMultiLiveEnum = 14;
    Data.LinkmicUserSettingInfo AnchorSettingInfo = 15;
    int64 ActionId = 16;
    repeated LinkmicUserInfo LinkedUsersList = 17;
    int64 SourceType = 18;
  }
  
  message LinkerSetting {
    int64 MaxMemberLimit = 1;
    int64 LinkType = 2;
    int64 Scene = 3;
    int64 OwnerUserId = 4;
    int64 OwnerRoomId = 5;
    int64 Vendor = 6;
  }
  
  message LinkerSysKickOutContent {
    int64 UserId = 1;
    string LinkmicIdStr = 2;
  }
  
  message LinkerUpdateUserContent {
    int64 FromUserId = 1;
    int64 ToUserId = 2;
    map<string, string> UpdateInfoMap = 3;
  }
  
  message LinkerUpdateUserSettingContent {
    Data.LinkmicUserSettingInfo UpdateUserSettingInfo = 1;
  }
  
  message LinkerWaitingListChangeContent {
  
  }
  
  message LinkLayerMessage {
    Header Header = 1;
    LinkLayerMessageType MessageType = 2;
    int64 ChannelId = 3;
    LinkMic.Scene Scene = 4;
    oneof CommonContentCase {
      CreateChannelContent CreateChannelContent = 100;
      ListChangeContent ListChangeContent = 102;
      InviteContent InviteContent = 103;
      ApplyContent ApplyContent = 104;
      PermitApplyContent PermitApplyContent = 105;
      ReplyInviteContent ReplyInviteContent = 106;
      KickOutContent KickOutContent = 107;
      CancelApplyContent CancelApplyContent = 108;
      CancelInviteContent CancelInviteContent = 109;
      LeaveContent LeaveContent = 110;
      FinishChannelContent FinishContent = 111;
      JoinDirectContent JoinDirectContent = 112;
      JoinGroupContent JoinGroupContent = 113;
      PermitJoinGroupContent PermitGroupContent = 114;
      CancelJoinGroupContent CancelGroupContent = 115;
      LeaveJoinGroupContent LeaveGroupContent = 116;
      P2PGroupChangeContent P2PGroupChangeContent = 117;
      GroupChangeContent GroupChangeContent = 118;
    }
    BusinessContent BusinessContent = 200;
  }
  
  message LinkMessage {
    Header Header = 1;
    int64 MessageType = 2;
    int64 LinkerId = 3;
    int64 Scene = 4;
    LinkerInviteContent InviteContent = 5;
    LinkerReplyContent ReplyContent = 6;
    LinkerCreateContent CreateContent = 7;
    LinkerCloseContent CloseContent = 8;
    LinkerEnterContent EnterContent = 9;
    LinkerLeaveContent LeaveContent = 10;
    LinkerCancelContent CancelContent = 11;
    LinkerKickOutContent KickOutContent = 12;
    LinkerLinkedListChangeContent LinkedListChangeContent = 13;
    LinkerUpdateUserContent UpdateUserContent = 14;
    LinkerWaitingListChangeContent WaitingListChangeContent = 15;
    LinkerMuteContent MuteContent = 16;
    LinkerRandomMatchContent RandomMatchContent = 17;
    LinkerUpdateUserSettingContent UpdateUserSettingContent = 18;
    LinkerMicIdxUpdateContent MicIdxUpdateContent = 19;
    LinkerListChangeContent ListChangeContent = 20;
    CohostListChangeContent CohostListChangeContent = 21;
    LinkerMediaChangeContent MediaChangeContent = 22;
    LinkerAcceptNoticeContent ReplyAcceptNoticeContent = 23;
    LinkerSysKickOutContent SysKickOutContent = 101;
    LinkmicUserToastContent UserToastContent = 102;
    string Extra = 200;
    int64 ExpireTimestamp = 201;
    string TransferExtra = 202;
  }
  
  message LinkMicFanTicketMethod {
    Header Header = 1;
    FanTicketRoomNoticeContent FanTicketRoomNotice = 2;
  }
  
  message LinkmicInfo {
    string AccessKey = 1;
    int64 LinkMicId = 2;
    bool Joinable = 3;
    int32 ConfluenceType = 4;
    string RtcExtInfo = 5;
    string RtcAppId = 6;
    string RtcAppSign = 7;
    string LinkmicIdStr = 8;
    int64 Vendor = 9;
  }
  
  message LinkMicMethod {
    Header Header = 1;
    int64 MessageType = 2;
    string AccessKey = 3;
    int64 AnchorLinkmicId = 4;
    int64 UserId = 5;
    int64 FanTicket = 6;
    int64 TotalLinkMicFanTicket = 7;
    int64 ChannelId = 8;
    int64 Layout = 9;
    int64 Vendor = 10;
    int64 Dimension = 11;
    string Theme = 12;
    int64 InviteUid = 13;
    int64 Answer = 14;
    int64 StartTime = 15;
    int64 Duration = 16;
    repeated UserScores UserScoresList = 17;
    int64 MatchType = 18;
    bool Win = 19;
    string Prompts = 20;
    int64 ToUserId = 21;
    map<int64, ContributorList> ContributorsMap = 22;
    int64 LinkmicLayout = 23;
    int64 FromUserId = 24;
    string Tips = 25;
    int64 StartTimeMs = 26;
    int32 ConfluenceType = 27;
    int64 FromRoomId = 28;
    int64 InviteType = 29;
    int64 SubType = 30;
    Data.RivalExtraInfo InviterRivalExtra = 31;
    string RtcExtInfo = 32;
    string RtcAppId = 33;
    string AppId = 34;
    string AppSign = 35;
    string RtcAppSign = 36;
    string AnchorLinkmicIdStr = 37;
    int64 RivalAnchorId = 38;
    int64 RivalLinkmicId = 39;
    string RivalLinkmicIdStr = 40;
    bool ShowPopup = 41;
    int64 SecInviteUid = 42;
    int64 Scene = 43;
    int64 SecApplyUid = 44;
    repeated Data.User LinkedUsersList = 45;
    string SecFromUserId = 46;
    LinkMicMethodMessageType ReplyType = 47;
    string ReplyPrompts = 48;
    string SecToUserId = 49;
    InvitorInfo Invitor_Info = 50;
    bool RtcJoinChannel = 51;
    int32 FanTicketIconType = 52;
    
    message UserScores {
      int64 Score = 1;
      int64 UserId = 2;
      int64 WeeklyRank = 3;
    }
    
    message Contributor {
      int64 Score = 1;
      int64 Rank = 2;
      int64 UserId = 3;
      Data.User User = 4;
    }
    
    message ContributorList {
      repeated Contributor ContributorList = 1;
    }
    
    message InvitorInfo {
      string InvitorNickName = 1;
      Data.Image InvitorAvatar = 2;
    }
  }
  
  message LinkmicUserInfo {
    int64 UserId = 1;
    string LinkmicIdStr = 2;
    int64 RoomId = 3;
    int64 LinkedTime = 4;
  }
  
  message LinkmicUserToastContent {
    int64 UserId = 1;
    int64 RoomId = 2;
    Data.Text DisplayText = 3;
  }
  
  message LinkStateMessage {
    Header Header = 1;
    int64 ChannelId = 2;
    LinkMic.Scene Scene = 3;
    int64 Version = 4;
    int32 NeedAck = 5;
    LinkMic.LayoutState Layout = 6;
    repeated LinkMic.LinkUserState UserStatesList = 7;
    int64 ClientSendTime = 8;
    LinkMic.StateType StateType = 9;
    LinkMic.BackGroundImageState Background = 10;
  }
  
  message ListChangeBizContent {
    map<int64, LinkMic.CohostUserInfo> UserInfosMap = 1;
  }
  
  message ListChangeContent {
    ListChangeType Type = 1;
    LinkMic.AllListUser List = 2;
  }
  
  message ListUser {
    Data.User User = 1;
    int64 ModifyTime = 2;
    Data.LinkType LinkType = 3;
    Data.LinkmicRoleType RoleType = 4;
    string LinkmicIdStr = 5;
    int64 PayedMoney = 6;
    int64 FanTicket = 7;
    int32 FanTicketIconType = 8;
  }
  
  message LiveIntroMessage {
    Header Header = 1;
    int64 RoomId = 2;
    Data.AuditStatus AuditStatus = 3;
    string Content = 4;
    Data.User Host = 5;
    int32 IntroMode = 6;
    repeated Data.BadgeStruct Badges = 7;
    string Language = 8;
  }
  
  message MarqueeAnnouncementMessage {
    Header Header = 1;
    string MessageScene = 2;
    repeated MessageEntity MessageEntityList = 3;
    
    message MessageEntity {
      NotifyMessage Notify = 1;
    }
  }
  
  message MemberMessage {
    Header Header = 1;
    Data.User User = 2;
    int64 MemberCount = 3;
    Data.User Operator = 4;
    bool IsSetToAdmin = 5;
    bool IsTopUser = 6;
    int64 RankScore = 7;
    int64 TopUserNo = 8;
    int64 EnterType = 9;
    int64 Action = 10;
    string ActionDescription = 11;
    int64 UserId = 12;
    EffectConfig Effect_Config = 13;
    string PopStr = 14;
    EffectConfig EnterEffectConfig = 15;
    Data.Image BackgroundImage = 16;
    Data.Image BackgroundImageV2 = 17;
    Data.Text AnchorDisplayText = 18;
    string ClientEnterSource = 19;
    string ClientEnterType = 20;
    string ClientLiveReason = 21;
    int64 ActionDuration = 22;
    string UserShareType = 23;
    DisplayStyle DisplayStyle = 24;
    map<int32, int32> AdminPermissionsMap = 25;
    int32 KickSource = 26;
    int64 AllowPreviewTime = 27;
    
    message EffectConfig {
      int64 Type = 1;
      Data.Image Icon = 2;
      int64 AvatarPos = 3;
      Data.Text Text = 4;
      Data.Image TextIcon = 5;
      int32 StayTime = 6;
      int64 AnimAssetId = 7;
      Data.Image Badge = 8;
      repeated int64 FlexSettings = 9;
    }
  }
  
  message Message {
    string Method = 1;
    bytes Payload = 2;
    int64 MsgId = 3;
    int32 MsgType = 4;
    int64 Offset = 5;
    bool IsHistory = 6;
  }
  
  message MsgDetectMessage {
    Header Header = 1;
    int32 DetectType = 2; // Possibly an Enum?
    TriggerCondition Trigger_Condition = 3;
    TimeInfo Time_Info = 4;
    int32 TriggerBy = 5; // Possible an Enum?
    string FromRegion = 6;
    
    message TimeInfo {
      int64 ClientStartMs = 1;
      int64 ApiRecvTimeMs = 2;
      int64 ApiSendToGoimMs = 3;
    }
    
    message TriggerCondition {
      bool UplinkDetectHttp = 1;
      bool UplinkDetectWebSocket = 2;
      bool DetectP2PMsg = 3;
      bool DetectRoomMsg = 4;
      bool HttpOptimize = 5;
    }
  }
  
  message MultiLiveContent {
    oneof BusinessCase {
      ApplyBizContent ApplyBizContent = 1;
      InviteBizContent InviteBizContent = 2;
      ReplyBizContent ReplyBizContent = 3;
      PermitBizContent PermitBizContent = 4;
      JoinDirectBizContent JoinDirectBizContent = 5;
      KickOutBizContent KickOutBizContent = 6;
    }
  }
  
  message NoticeMessage {
    Header Header = 1;
    string Content = 2;
    int64 NoticeType = 3;
    string Style = 4;
    Data.Text Title = 5;
    Data.Text ViolationReason = 6;
    Data.Text DisplayText = 7;
    Data.Text TipsTitle = 8;
    string TipsUrl = 9;
    Data.Text NoticeTitle = 10;
    Data.Text NoticeContent = 11;
    string Scene = 12;
  }
  
  message NotifyMessage {
    Header Header = 1;
    string Schema = 2;
    int64 NotifyType = 3;
    string ContentStr = 4;
    Data.User User = 5;
    Extra Extra_Data = 6;
    int64 NotifyClass = 7;
    repeated int64 FlexSettingList = 8;
    string Source = 9;
    int64 FromUserId = 10;
    Data.PrivilegeLogExtra PrivilegeLogExtra = 11;
    int64 ToAnchorId = 12;
    
    message Background {
      int32 Width = 1;
      int32 Height = 2;
      repeated string UrlList = 3;
      string Uri = 4;
    }
    
    message Content {
      string ContentStr = 1;
      bool NeedHighLight = 2;
    }
    
    message ContentList {
      repeated Content ContentsList = 1;
      string HighLightColor = 2;
    }
    
    message Extra {
      int64 Duration = 1;
      Background Background = 2;
      ContentList ContentList = 3;
    }
  }
  
  message P2PGroupChangeContent {
    repeated LinkMic.RTCExtraInfo GroupExtInfoList = 1;
    LinkMic.GroupChannelAllUser GroupUser = 2;
  }
  
  message PartnershipDropsUpdateMessage {
    Header Header = 1;
    ChangeMode Change_Mode = 2;
    string DropsId = 3;
    string TaskId = 4;
    string EventId = 5;
    int64 AnchorUid = 6;
    
    enum ChangeMode
    {
      Change_Mode_Show = 0;
      Change_Mode_Update = 1;
      Change_Mode_Close = 2;
    }
  }
  
  message PartnershipGameOfflineMessage {
    Header Header = 1;
    repeated OfflineGameInfo OfflineGameList = 2;
    
    message OfflineGameInfo {
      string TaskId = 1;
      string ToastText = 2;
      int32 TaskListLen = 3;
      OfflineType Offline_Type = 4;
      
      enum OfflineType
      {
        TaskOffline = 0;
        EventOffline = 1;
        DropsOffline = 2;
      }
    }
  }
  
  message PartnershipPunishMessage {
    Header Header = 1;
    Data.PunishEventInfo PunishInfo = 2;
  }
  
  message PerceptionMessage {
    Header Header = 1;
    Data.PerceptionDialogInfo Dialog = 2;
    Data.PunishEventInfo PunishInfo = 3;
    int64 EndTime = 4;
    bool ShowViolationWarning = 5;
    Data.Text Toast = 6;
    int32 FloatStyle = 7;
    Data.Text FloatText = 8;
  }
  
  message PermitApplyContent {
    LinkMic.Player Permiter = 1;
    string PermiterLinkMicId = 2;
    LinkMic.Position ApplierPos = 3;
    LinkMic.ReplyStatus ReplyStatus = 4;
    LinkMic.DSLConfig Dsl = 5;
    LinkMic.Player Applier = 6;
    LinkMic.Player Operator = 7;
    string ApplierLinkMicId = 8;
  }
  
  message PermitBizContent {
    Data.LinkmicUserSettingInfo AnchorSettingInfo = 1;
    int64 ExpireTimestamp = 2;
    Data.User OperatorUserInfo = 3;
    LinkMic.LinkMicUserAdminType OperatorLinkAdminType = 4;
  }
  
  message PermitJoinGroupBizContent {
    LinkMic.ReplyStatus ReplyStatus = 1;
  }
  
  message PermitJoinGroupContent {
    LinkMic.GroupPlayer Approver = 1;
    LinkMic.AgreeStatus AgreeStatus = 2;
    LinkMic.JoinType Type = 3;
    repeated LinkMic.RTCExtraInfo GroupExtInfoList = 4;
    LinkMic.GroupChannelAllUser GroupUser = 5;
  }
  
  message PollEndContent {
    int32 EndType = 1; // Possibly an Enum?
    repeated PollOptionInfo OptionList = 2;
    Data.User Operator = 3;
  }
  
  message PollingRequest {
    int64 LiveId = 1;
    int64 AId = 2;
    string RoomId = 3;
    string Identity = 4;
    string LastRtt = 5;
    string InternalExt = 6;
    string Cursor = 7;
    string DeviceId = 8;
    string UniqueId = 9;
    string DevicePlatform = 10;
    string AppLanguage = 11;
    string VersionCode = 12;
    string UpdateVersionCode = 13;
    string RespContentType = 14;
    string GetHistory = 15;
    string Ac = 16;
    string KeepMethod = 17;
    string Stress = 18;
    int64 RecvCnt = 19;
    int64 ParseCnt = 20;
    string FetchRule = 21;
    string AbGroup = 22;
    int64 DidRule = 23;
    bool Debug = 24;
    string LiveRegion = 25;
    string RoomTag = 26;
    string UserId = 27;
    string ForceHttps = 28;
    string AccountType = 29;
    string SimOper = 30;
    string SimRegion = 31;
    string UILanguage = 32;
    string Youtube = 33;
    string Gender = 34;
    string HevcSupported = 35;
    string AppVersionMinor = 36;
    string Brand = 37;
    string AppId = 38;
    string Gaid = 39;
    string OriginalChannel = 40;
    string Logo = 41;
    string ReleaseBuild = 42;
  }
  
  message PollingReponse {
    repeated string DataList = 1;
    Extra Extra_Data = 2;
    string InternalExt = 3;
    int32 StatusCode = 4;
    
    message Extra {
      string Cursor = 1;
      int64 FetchInterval = 2;
      int64 Now = 3;
    }
  }
  
  message PollMessage {
    Header Header = 1;
    int64 MessageType = 2;
    int64 PollId = 3;
    PollStartContent StartContent = 4;
    PollEndContent EndContent = 5;
    PollUpdateVotesContent UpdateContent = 6;
    int32 PollKind = 7; // Possibly an Enum?
  }
  
  message PollOptionInfo {
    int64 Votes = 1;
    string DisplayContent = 2;
    int32 OptionIdx = 3;
    repeated Data.VoteUser VoteUserList = 4;
  }
  
  message PollStartContent {
    int64 StartTime = 1;
    int64 EndTime = 2;
    repeated PollOptionInfo OptionList = 3;
    string Title = 4;
    Data.User Operator = 5;
  }
  
  message PollUpdateVotesContent {
    repeated PollOptionInfo OptionList = 2;
  }
  
  message PublicAreaCommon {
    Data.Image UserLabel = 1;
    int64 UserConsumeInRoom = 2;
  }
  
  message RankTextMessage {
    Header Header = 1;
    int32 Scene = 2;
    int64 OwnerIdxBeforeUpdate = 3;
    int64 OwnerIdxAfterUpdate = 4;
    Data.Text SelfGetBadgeMsg = 5;
    Data.Text OtherGetBadgeMsg = 6;
    int64 CurUserId = 7;
  }
  
  message RankUpdateMessage {
    Header Header = 1;
    repeated RankUpdate UpdatesList = 2;
    int32 GroupType = 3; // TODO: UNKNOWN ENUM
    OpType OpType = 4;
    int64 Priority = 5;
    repeated Data.RankTabInfo TabsList = 6;
    bool IsAnimationLoopPlay = 7;
    bool AnimationLoopForOff = 8;
    
    message RankUpdate {
      Data.RankViewType RankType = 1;
      int64 OwnerRank = 2;
      Data.Text DefaultContent = 3;
      Data.RankSprintPrompt Prompt = 4;
      bool ShowEntranceAnimation = 5;
      int64 Countdown = 6;
      AnimationInfo Animation_Info = 7;
      Data.RankViewType RelatedTabRankType = 8;
      ShowType RequestFirstShowType = 9;
      int64 SupportedVersion = 10;
      bool OwnerOnRank = 11;
      
      message AnimationInfo {
        AnimationInfoType Type = 1;
        string BackgroundColor = 2;
        Data.Text Content = 3;
        int64 Duration = 4;
      }
    }
  }
  
  message RealBusinessContent {
    int64 OverLength = 1;
    oneof BusinessCase {
      MultiLiveContent MultiLiveContent = 100;
    }
  }
  
  message ReplyBizContent {
    int32 LinkType = 1;
    int32 IsTurnOffInvitation = 2;
    Data.User ReplyUserInfo = 3;
  }
  
  message ReplyInviteContent {
    LinkMic.Player Invitee = 1;
    LinkMic.ReplyStatus ReplyStatus = 2;
    string InviteeLinkMicId = 3;
    LinkMic.Position InviteePos = 4;
    LinkMic.Player InviteOperatorUser = 5;
  }
  
  message Request {
    int64 LiveId = 1;
    int64 Aid = 2;
    string RoomId = 3;
    string Identity = 4;
    string LastRtt = 5;
    string InternalExt = 6;
    string Cursor = 7;
    string DeviceId = 8;
    string UniqueId = 9;
    string DevicePlatform = 10;
    string AppLanguage = 11;
    string VersionCode = 12;
    string UpdateVersionCode = 13;
    string RespContentType = 14;
    string GetHistory = 15;
    string Ac = 16;
    string KeepMethod = 17;
    string Stress = 18;
    int64 RecvCnt = 19;
    int64 ParseCnt = 20;
    string FetchRule = 21;
    string AbGroup = 22;
    int64 DidRule = 23;
    bool Debug = 24;
    string LiveRegion = 25;
    string RoomTag = 26;
    string UserId = 27;
    string ForceHttps = 28;
    string AccountType = 29;
    string WssVersion = 30;
    string HistoryCommentCursor = 31;
  }
  
  message Response {
    repeated Message MessagesList = 1;
    string Cursor = 2;
    int64 FetchInterval = 3;
    int64 Now = 4;
    string InternalExt = 5;
    int32 FetchType = 6;
    map<string, string> RouteParamsMap = 7;
    int64 HeartBeatDuration = 8;
    bool NeedsAck = 9;
    string PushServer = 10;
    bool IsFirst = 11;
    string HistoryCommentCursor = 12;
    bool HistoryNoMore = 13;
  }
  
  message RoomMessage {
    Header Header = 1;
    string Content = 2;
    bool SupprotLandscape = 3;
    int64 Source = 4;
    Data.Image Icon = 5;
    string Scene = 6;
    bool IsWelcome = 7;
  }
  
  message RoomUserSeqMessage {
    Header Header = 1;
    repeated Contributor RanksList = 2;
    int64 Total = 3;
    string PopStr = 4;
    repeated Contributor SeatsList = 5;
    int64 Popularity = 7;
    int64 TotalUser = 8;
    int64 Anonymous = 9;
    
    message Contributor {
      int64 Score = 1;
      Data.User User = 2;
      int64 Rank = 3;
      int64 Delta = 4;
    }
  }
  
  message RoomVerifyMessage {
    Header Header = 1;
    int32 Action = 2; // TODO: UNKNOWN ENUM (Potentially this is Messages.VerifyAction?)
    string Content = 3;
    int64 NoticeType = 4;
    bool CloseRoom = 5;
  }
  
  message SocialMessage {
    Header Header = 1;
    Data.User User = 2;
    int64 ShareType = 3;
    int64 Action = 4; // Follow = 1, Share = 3.
    string ShareTarget = 5;
    int64 FollowCount = 6;
    int64 ShareDisplayStyle = 7;
    int64 ShareCount = 8;
  }
  
  message SpeakerMessage {
    Header Header = 1;
  }
  
  message SpecifiedDisplayText {
    int64 Uid = 1;
    Data.Text DisplayText = 2;
  }
  
  message SubCapsuleMessage {
    Header Header = 1;
    Data.Text Description = 2;
    Data.Text BtnName = 3;
    string BtnUrl = 4;
    string CapsuleScene = 5;
    int64 FromUserId = 6;
  }
  
  message SubNotifyMessage {
    Header Header = 1;
    Data.User User = 2;
    ExhibitionType ExhibitionType = 3;
    int64 SubMonth = 4;
    SubscribeType SubscribeType = 5;
    OldSubscribeStatus OldSubscribeStatus = 6;
    MessageType MessageType = 7;
    SubscribingStatus SubscribingStatus = 8;
    bool IsSend = 9;
    bool IsCustom = 10;
  }
  
  message SubPinEventMessage {
    Header Header = 1;
    ActionType Action_Type = 2;
    Data.SubPinCard Card = 3;
    int64 OperatorUserId = 4;
    
    enum ActionType
    {
      ActionType_Unknown = 0;
      Pin = 1;
      Unpin = 2;
    }
  }
  
  message SubscriptionNotifyMessage {
    Header Header = 1;
    Data.User User = 2;
    ExhibitionType ExhibitionType = 3;
  }
  
  message ToastMessage {
    Header Header = 1;
    int64 DisplayDurationMillisecond = 2;
    int64 DelayDisplayDurationMillisecond = 3;
  }
  
  message UnauthorizedMemberMessage {
    Header Header = 1;
    int32 Action = 2;
    Data.Text NickNamePrefix = 3;
    string NickName = 4;
    Data.Text EnterText = 5;
  }
  
  message UserFanTicket {
    int64 UserId = 1;
    int64 FanTicket = 2;
    int64 MatchTotalScore = 3;
    int32 MatchRank = 4;
  }
}

































































































































































































































































/**

-=-=-=-=-=-=-=-=-=-=-=
     OLD MESSAGES     
-=-=-=-=-=-=-=-=-=-=-=

*/

message UnknownObjects
{

/**

-=-=-=-=-=-=-=-=-=-=-=
    TikTok-Objects    
-=-=-=-=-=-=-=-=-=-=-=

*/

  message BattleTaskData {
    uint32 Data1 = 1;
  }
  
  message GiftDataDetailed {
    uint32 Data1 = 1;
    Data.Image Data2 = 2;
    uint32 Data3 = 3;
    int32 Data4 = 4;
  }
  
  message GiftDetailsData {
    uint32 Data1 = 1;
    Data.Text Text2 = 2;
    string Data11 = 11;
    Data.ListUser User21 = 21;
    GiftDataDetailed Details22 = 22;
  }
  
  message LinkMicArmiesItems {
    uint64 HostUserId = 1;
    repeated LinkMicArmy BattleGroups = 2;
  }
  
  message LinkMicArmy {
    repeated LinkMicArmyUser Users = 1;
    uint32 Score = 2;
  }
  
  message LinkMicArmyUser {
    int64 Id = 1;
    int64 Data2 = 2; // Score?
    string UserName = 3;
    Data.Image Avatar = 4;
  }
  
  message Ranking {
    string Type = 1;
    string Label = 2;
    Data.Text Text = 3;
    repeated ValueLabel Details = 4;
  }
  
  message RoomNotifyMessage {
    string Type = 1;
    uint64 Id1 = 2;
    uint64 Id2 = 3;
    uint64 Timestamp = 4;
    NotifyData Data5 = 5;
    
    message NotifyData {
      string Type = 1;
      string Label = 2;
      Data.Text Text3 = 3;
      repeated GiftDetailsData Data4 = 4;
    }
  }
  
  message TimestampContainer {
    int64 Timestamp1 = 1;
    int64 Timestamp2 = 2;
    int64 Timestamp3 = 3;
  }
  
  message ValueLabel {
    int32 Data1 = 1;
    string Label2 = 2;
    string Label3 = 3;
    string Label4 = 4;
  }


/**

-=-=-=-=-=-=-=-=-=-=-=
   Server-Messages    
-=-=-=-=-=-=-=-=-=-=-=

*/

  message GiftBroadcastMessage {
    Messages.Header Header = 1;
    uint64 Data2 = 2;
    Data.Image Picture3 = 3;
    GiftBroadcastData Data4 = 4;
    
    message GiftBroadcastData {
      RoomNotifyMessage RoomNotifyMessage = 1;
      string Uri = 2;
      uint32 Data3 = 3;
      GiftBroadCastImageDataContainer Data6 = 6;
      string NotifyType = 9;
      uint64 Data10 = 10;
      Data.Image Data11 = 11;
      
      message GiftBroadCastImageDataContainer {
        uint32 Data1 = 1;
        GiftBroadcastImageData Data2 = 2;
        
        message GiftBroadcastImageData {
          uint32 Data1 = 1;
          uint32 Data2 = 2;
          repeated string Urls = 3;
          string Uri = 4;
        }
      }
    }
  }
  
  message HourlyRankMessage {
    Messages.Header Header = 1;
    RankContainer Data2 = 2;
    uint32 Data3 = 3;
    
    message RankContainer {
      uint32 Data1 = 1;
      RankingData Data2 = 2;
      uint32 Data3 = 3;
      Ranking Data4 = 4;
      RankingData2 Data5 = 5;
      uint32 Data6 = 6;
      uint32 Data7 = 7;
      
      message RankingData {
        uint32 Data1 = 1;
        Ranking Data2 = 2;
        string Data3 = 3;
      }
      
      message RankingData2 {
        uint32 Data1 = 1;
        uint32 Data2 = 2;
        Ranking Data3 = 3;
        string Data4 = 4;
        uint32 Data5 = 5;
        uint32 Data6 = 6;
      }
    }
  }
  
  message LinkMicArmies {
    Messages.Header Header = 1;
    uint64 Id = 2;
    repeated LinkMicArmiesItems Data3 = 3;
    uint64 Id2 = 4;
    uint64 Timestamp5 = 5;
    uint64 Timestamp6 = 6;
    int32 BattleStatus = 7; // Probably an Enum
    uint64 Data8 = 8;
    uint64 Data9 = 9;
    uint32 Data10 = 10;
    Data.Image Picture11 = 11;
    uint32 Data12 = 12;
    uint32 Data13 = 13;
    string Data17 = 17;
  }
  
  message LinkMicBattle {
    Messages.Header Header = 1;
    uint64 Id = 2;
    LinkMicBattleConfig Data3 = 3;
    uint32 Data4 = 4;
    repeated LinkMicBattleDetails Data5 = 5;
    repeated LinkMicBattleTeam Teams1 = 9;
    repeated LinkMicBattleTeam Teams2 = 10;
    repeated LinkMicBattleTeamData TeamData = 13;
    uint64 Id2 = 16;
    
    message LinkMicBattleConfig {
      uint64 Id = 1;
      uint64 Timestamp = 2;
      uint32 Data3 = 3;
      uint64 Id2 = 4;
      uint32 Data5 = 5;
      uint32 Data6 = 6;
      LinkMicBattleGift Data7 = 7;
      uint32 Data8 = 8;
      
      message LinkMicBattleGift {
        string Type = 2;
        Data.Image Picture = 3;
      }
    }
    
    message LinkMicBattleData {
      uint64 Id = 1;
      uint32 Data2 = 2;
      uint32 Data3 = 3;
      uint32 Data5 = 5;
      string Url = 6;
    }
    
    message LinkMicBattleDetails {
      uint64 Id = 1;
      LinkMicBattleData Data2 = 2;
    }
    
    message LinkMicBattleTeam {
      uint64 Id = 1;
      LinkMicArmy Players = 2;
    }
    
    message LinkMicBattleTeamData {
      uint64 TeamId = 1;
      LinkMicBattleData Data2 = 2;
    }
  }
  
  message LinkMicBattlePunishFinish {
    Messages.Header Header = 1;
    uint64 Id1 = 2;
    uint64 Timestamp = 3;
    uint32 Data4 = 4;
    uint64 Id2 = 5;
    LinkMicBattlePunishFinishData Data6 = 6;
    
    message LinkMicBattlePunishFinishData {
      uint64 Id2 = 1; // Same as Id2 in outer object (loser?)
      uint64 Timestamp = 2;
      uint32 Data3 = 3;
      uint64 Id1 = 4; // Same as Id1 in outer object (winner?)
      uint32 Data5 = 5;
      uint32 Data6 = 6;
      uint32 Data8 = 8;
    }
  }
  
  message LinkmicBattleTaskMessage {
    Messages.Header Header = 1;
    uint32 Data2 = 2;
    LinkmicBattleTaskData Data3 = 3;
    LinkmicBattleTaskData2 Data5 = 5;
    
    message LinkmicBattleTaskData {
      BattleTaskData Data1 = 1;
    }
    
    message LinkmicBattleTaskData2 {
      uint32 Data1 = 1;
      uint32 Data2 = 2;
    }
  }
  
  message OecLiveShoppingMessage {
    Messages.Header Header = 1;
    uint32 Data2 = 2;
    LiveShoppingData Data4 = 4;
    TimestampContainer Data5 = 5;
    LiveShoppingDetails Data9 = 9;
    
    message LiveShoppingData {
      string Title = 1;
      string PriceString = 2;
      string ImageUrl = 3;
      string ShopUrl = 4;
      uint64 Data6 = 6;
      string ShopName = 7;
      uint64 Data8 = 8;
      string ShopUrl2 = 9;
      uint64 Data10 = 10;
      uint64 Data11 = 11;
    }
    
    message LiveShoppingDetails {
      string Id1 = 1;
      string Data3 = 3;
      uint32 Data4 = 4;
      uint64 Timestamp = 5;
      ValueLabel Data6 = 6;
    }
  }
  
  message QuestionNewMessage {
    Messages.Header Header = 1;
    QuestionDetails Data2 = 2;
    
    message QuestionDetails {
      uint64 Id = 1;
      string Text = 2;
      uint64 Timestamp = 4;
      Data.User User = 5;
      uint32 Data20 = 20;
    }
  }
  
  message RoomPinMessage {
    Messages.Header Header = 1;
    bytes PinnedMessage = 2; // Usually this is a ChatMessage, but it can also be another message.
    string OriginalMsgType = 30; // Use this Type/Method to Deserialize the PinnedMessage
    uint64 Timestamp = 31;
    RoomPinMessageData Data32 = 32;
    uint32 Data33 = 33;
    int32 Data34 = 34;
    uint64 Data35 = 35;
    
    message RoomPinMessageData {
      uint64 Id = 1;
      RoomPinMessageDataDetails Data32 = 32;
      
      message RoomPinMessageDataDetails {
        uint32 Data2 = 2;
      }
    }
  }
  
  message SystemMessage {
    Messages.Header Header = 1;
    string Message = 2;
  }
}